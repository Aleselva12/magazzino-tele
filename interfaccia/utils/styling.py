"""
Configurazione e stili per l'interfaccia Magazzino Tele
Gestisce configurazione applicazione e stili UI
Generated by Copilot
"""

import tkinter as tk
from tkinter import ttk
from typing import Dict, Any


class AppConfig:
    """Configurazione globale dell'applicazione"""
    
    # Database
    DB_CONFIG = {
        'host': 'localhost',
        'user': 'root',
        'password': '',
        'database': 'magazzino_tele'
    }
    
    # UI Dimensioni
    WINDOW_SIZE = (1200, 800)
    WINDOW_MIN_SIZE = (800, 600)
    
    # Paths
    LOGO_PATH = "assets/logo.png"
    ICON_PATH = "assets/icon.ico"
    
    # Debug
    DEBUG_MODE = True


class AppStyles:
    """Gestione stili e temi dell'applicazione"""
    
    # Colori principali
    COLORS = {
        'primary': '#2c3e50',
        'secondary': '#34495e',
        'success': '#27ae60',
        'warning': '#f39c12',
        'danger': '#e74c3c',
        'info': '#3498db',
        'light': '#ecf0f1',
        'dark': '#2c3e50',
        'white': '#ffffff',
        'gray': '#bdc3c7'
    }
    
    # Font
    FONTS = {
        'default': ('Segoe UI', 10),
        'large': ('Segoe UI', 12),
        'title': ('Segoe UI', 16, 'bold'),
        'header': ('Segoe UI', 14, 'bold'),
        'small': ('Segoe UI', 9)
    }
    
    # Padding e margin standard
    PADDING = {
        'small': 5,
        'medium': 10,
        'large': 20,
        'xl': 30
    }
    
    @classmethod
    def apply_theme(cls, root: tk.Tk) -> None:
        """Applica il tema principale all'applicazione"""
        style = ttk.Style()
        
        # Configura tema base
        style.theme_use('clam')
        
        # Stili per Frame
        style.configure('Main.TFrame', background=cls.COLORS['light'])
        style.configure('Card.TFrame', 
                       background=cls.COLORS['white'],
                       relief='raised',
                       borderwidth=1)
        
        # Stili per Label
        style.configure('Title.TLabel',
                       font=cls.FONTS['title'],
                       background=cls.COLORS['light'],
                       foreground=cls.COLORS['dark'])
        
        style.configure('Header.TLabel',
                       font=cls.FONTS['header'],
                       background=cls.COLORS['light'],
                       foreground=cls.COLORS['dark'])
        
        style.configure('Info.TLabel',
                       font=cls.FONTS['small'],
                       background=cls.COLORS['light'],
                       foreground=cls.COLORS['gray'])
        
        # Stili per Button
        style.configure('Primary.TButton',
                       font=cls.FONTS['default'],
                       background=cls.COLORS['primary'],
                       foreground=cls.COLORS['white'])
        
        style.configure('Success.TButton',
                       font=cls.FONTS['default'],
                       background=cls.COLORS['success'],
                       foreground=cls.COLORS['white'])
        
        style.configure('Warning.TButton',
                       font=cls.FONTS['default'],
                       background=cls.COLORS['warning'],
                       foreground=cls.COLORS['white'])
        
        style.configure('Danger.TButton',
                       font=cls.FONTS['default'],
                       background=cls.COLORS['danger'],
                       foreground=cls.COLORS['white'])
        
        # Stili per Entry
        style.configure('TEntry',
                       font=cls.FONTS['default'],
                       fieldbackground=cls.COLORS['white'])
        
        # Stili per Combobox
        style.configure('TCombobox',
                       font=cls.FONTS['default'],
                       fieldbackground=cls.COLORS['white'])
        
        # Stili per Treeview
        style.configure('Treeview',
                       font=cls.FONTS['default'],
                       background=cls.COLORS['white'],
                       fieldbackground=cls.COLORS['white'])
        
        style.configure('Treeview.Heading',
                       font=cls.FONTS['header'],
                       background=cls.COLORS['light'])
        
        # Configura finestra principale
        root.configure(bg=cls.COLORS['light'])
        
        # Imposta dimensioni finestra
        root.geometry(f"{AppConfig.WINDOW_SIZE[0]}x{AppConfig.WINDOW_SIZE[1]}")
        root.minsize(*AppConfig.WINDOW_MIN_SIZE)
        
        # Centra la finestra
        cls._center_window(root)
    
    @staticmethod
    def setup_modern_styles():
        """Configura stili moderni avanzati per l'applicazione"""
        style = ttk.Style()
        
        # Usa un tema moderno se disponibile
        available_themes = style.theme_names()
        if 'vista' in available_themes:
            style.theme_use('vista')
        elif 'clam' in available_themes:
            style.theme_use('clam')
        
        # Stili personalizzati per pulsanti
        style.configure('Primary.TButton',
                        background=AppStyles.COLORS['primary'],
                        foreground='white',
                        borderwidth=1,
                        focuscolor='none',
                        font=('Segoe UI', 10, 'bold'))
        
        style.map('Primary.TButton',
                  background=[('active', AppStyles.COLORS['secondary']),
                             ('pressed', AppStyles.COLORS['dark'])])
        
        style.configure('Success.TButton',
                        background=AppStyles.COLORS['success'],
                        foreground='white',
                        borderwidth=1,
                        focuscolor='none',
                        font=('Segoe UI', 10, 'bold'))
        
        style.map('Success.TButton',
                  background=[('active', '#229954'),
                             ('pressed', '#1e8449')])
        
        style.configure('Warning.TButton',
                        background=AppStyles.COLORS['warning'],
                        foreground='white',
                        borderwidth=1,
                        focuscolor='none',
                        font=('Segoe UI', 10, 'bold'))
        
        style.map('Warning.TButton',
                  background=[('active', '#e67e22'),
                             ('pressed', '#d35400')])
        
        style.configure('Danger.TButton',
                        background=AppStyles.COLORS['danger'],
                        foreground='white',
                        borderwidth=1,
                        focuscolor='none',
                        font=('Segoe UI', 10, 'bold'))
        
        style.map('Danger.TButton',
                  background=[('active', '#c0392b'),
                             ('pressed', '#a93226')])
        
        # Stili per LabelFrame
        style.configure('Modern.TLabelframe',
                        background=AppStyles.COLORS['light'],
                        borderwidth=2,
                        relief='solid')
        
        style.configure('Modern.TLabelframe.Label',
                        background=AppStyles.COLORS['light'],
                        foreground=AppStyles.COLORS['primary'],
                        font=('Segoe UI', 11, 'bold'))
        
        # Stili per Entry
        style.configure('Modern.TEntry',
                        borderwidth=2,
                        relief='solid',
                        focuscolor=AppStyles.COLORS['info'],
                        font=('Segoe UI', 10))
        
        # Stili per Treeview (tabelle)
        style.configure('Modern.Treeview',
                        background='white',
                        foreground=AppStyles.COLORS['primary'],
                        fieldbackground='white',
                        borderwidth=1,
                        relief='solid',
                        font=('Segoe UI', 9))
        
        style.configure('Modern.Treeview.Heading',
                        background=AppStyles.COLORS['primary'],
                        foreground='white',
                        borderwidth=1,
                        relief='solid',
                        font=('Segoe UI', 9, 'bold'))
        
        style.map('Modern.Treeview',
                  background=[('selected', AppStyles.COLORS['info'])],
                  foreground=[('selected', 'white')])
        
        # Stili per Scale/Progressbar
        style.configure('Modern.Horizontal.TProgressbar',
                        background=AppStyles.COLORS['success'],
                        borderwidth=0,
                        lightcolor=AppStyles.COLORS['success'],
                        darkcolor=AppStyles.COLORS['success'])
        
        return style
    
    @staticmethod
    def _center_window(window: tk.Tk) -> None:
        """Centra la finestra sullo schermo"""
        window.update_idletasks()
        
        # Ottieni dimensioni schermo
        screen_width = window.winfo_screenwidth()
        screen_height = window.winfo_screenheight()
        
        # Ottieni dimensioni finestra
        window_width = window.winfo_width()
        window_height = window.winfo_height()
        
        # Calcola posizione
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        
        # Applica posizione
        window.geometry(f"+{x}+{y}")
    
    @classmethod
    def create_card_frame(cls, parent: tk.Widget, title: str = None, **kwargs) -> ttk.Frame:
        """Crea un frame con stile card"""
        card_frame = ttk.Frame(parent, style='Card.TFrame', **kwargs)
        
        if title:
            title_label = ttk.Label(card_frame, text=title, style='Header.TLabel')
            title_label.pack(anchor=tk.W, padx=cls.PADDING['medium'], pady=(cls.PADDING['medium'], 0))
        
        return card_frame
    
    @classmethod
    def create_separator(cls, parent: tk.Widget, **kwargs) -> ttk.Separator:
        """Crea una linea separatrice"""
        return ttk.Separator(parent, **kwargs)


class UIHelpers:
    """Utility helper per l'interfaccia utente"""
    
    @staticmethod
    def validate_number_input(value: str) -> bool:
        """Valida input numerico"""
        if value == "":
            return True
        try:
            float(value)
            return True
        except ValueError:
            return False
    
    @staticmethod
    def validate_integer_input(value: str) -> bool:
        """Valida input intero"""
        if value == "":
            return True
        try:
            int(value)
            return True
        except ValueError:
            return False
    
    @staticmethod
    def format_currency(amount: float) -> str:
        """Formatta importo come valuta"""
        return f"€ {amount:.2f}"
    
    @staticmethod
    def format_date(date_obj) -> str:
        """Formatta data in formato italiano"""
        try:
            return date_obj.strftime("%d/%m/%Y")
        except (AttributeError, ValueError):
            return str(date_obj)
    
    @staticmethod
    def truncate_text(text: str, max_length: int = 50) -> str:
        """Tronca testo se troppo lungo"""
        if len(text) <= max_length:
            return text
        return text[:max_length-3] + "..."
    
    @staticmethod
    def create_tooltip(widget: tk.Widget, text: str) -> None:
        """Crea tooltip per widget"""
        def on_enter(event):
            tooltip = tk.Toplevel()
            tooltip.wm_overrideredirect(True)
            tooltip.wm_geometry(f"+{event.x_root+10}+{event.y_root+10}")
            
            label = tk.Label(tooltip, text=text, 
                           background="lightyellow", 
                           relief="solid", 
                           borderwidth=1,
                           font=("Arial", 9))
            label.pack()
            
            widget.tooltip = tooltip
        
        def on_leave(event):
            if hasattr(widget, 'tooltip'):
                widget.tooltip.destroy()
                del widget.tooltip
        
        widget.bind("<Enter>", on_enter)
        widget.bind("<Leave>", on_leave)


# Configurazione di registro per debug
if AppConfig.DEBUG_MODE:
    import logging
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
