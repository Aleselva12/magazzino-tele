# Generated by Copilot
"""
Interfaccia avanzata per gestione backup e ripristino
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import threading
from datetime import datetime
import os
import sys

# Aggiungi percorso per import backend
current_dir = os.path.dirname(os.path.abspath(__file__))
backend_path = os.path.join(current_dir, '..', '..', 'backend')
sys.path.insert(0, backend_path)

from backup_manager import backup_manager

class BackupInterface:
    """Interfaccia completa per backup e ripristino"""
    
    def __init__(self, root, on_back=None):
        self.root = root
        self.on_back = on_back
        self.backup_running = False
        self.restore_running = False
        
        # Stili personalizzati
        self.setup_styles()
        
        # Frame principale
        self.main_frame = ttk.Frame(self.root)
        self.main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        self.create_interface()
        self.load_tables()
        self.load_backups()
    
    def setup_styles(self):
        """Configura stili personalizzati"""
        style = ttk.Style()
        
        # Stile per pulsanti principali
        style.configure(
            "Primary.TButton",
            font=('Arial', 10, 'bold'),
            padding=(10, 5)
        )
        
        # Stile per pulsanti di azione
        style.configure(
            "Action.TButton",
            font=('Arial', 9),
            padding=(8, 4)
        )
    
    def create_interface(self):
        """Crea l'interfaccia completa"""
        # Header con titolo e pulsante home
        self.create_header()
        
        # Notebook per organizzare funzioni
        self.notebook = ttk.Notebook(self.main_frame)
        self.notebook.pack(fill=tk.BOTH, expand=True, pady=(10, 0))
        
        # Tab per creazione backup
        self.create_backup_tab()
        
        # Tab per ripristino
        self.create_restore_tab()
    
    def create_header(self):
        """Crea header con titolo e navigazione"""
        header_frame = ttk.Frame(self.main_frame)
        header_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Pulsante Home
        if self.on_back:
            ttk.Button(
                header_frame,
                text="üè† Homepage",
                command=self.on_back,
                style="Action.TButton"
            ).pack(side=tk.LEFT)
        
        # Titolo
        title_label = ttk.Label(
            header_frame,
            text="Gestione Backup Database",
            font=('Arial', 14, 'bold')
        )
        title_label.pack(side=tk.LEFT, padx=(20, 0))
        
        # Info stato
        self.status_label = ttk.Label(
            header_frame,
            text="Sistema pronto",
            foreground="green"
        )
        self.status_label.pack(side=tk.RIGHT)
    
    def create_backup_tab(self):
        """Crea tab per creazione backup"""
        backup_frame = ttk.Frame(self.notebook)
        self.notebook.add(backup_frame, text="Crea Backup")
        
        # Sezione selezione tabelle
        tables_section = ttk.LabelFrame(backup_frame, text="Selezione Tabelle", padding=10)
        tables_section.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # Frame per controlli tabelle
        controls_frame = ttk.Frame(tables_section)
        controls_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Pulsanti selezione rapida
        ttk.Button(
            controls_frame,
            text="Seleziona Tutte",
            command=self.select_all_tables,
            style="Action.TButton"
        ).pack(side=tk.LEFT, padx=(0, 5))
        
        ttk.Button(
            controls_frame,
            text="Deseleziona Tutte",
            command=self.deselect_all_tables,
            style="Action.TButton"
        ).pack(side=tk.LEFT, padx=(0, 5))
        
        # Info numero tabelle selezionate
        self.selected_count_label = ttk.Label(
            controls_frame,
            text="Nessuna tabella selezionata"
        )
        self.selected_count_label.pack(side=tk.RIGHT)
        
        # Frame scrollabile per checkbox tabelle
        tables_canvas_frame = ttk.Frame(tables_section)
        tables_canvas_frame.pack(fill=tk.BOTH, expand=True)
        
        self.tables_canvas = tk.Canvas(tables_canvas_frame, height=150)
        tables_scrollbar = ttk.Scrollbar(tables_canvas_frame, orient="vertical", command=self.tables_canvas.yview)
        self.tables_scrollable_frame = ttk.Frame(self.tables_canvas)
        
        self.tables_scrollable_frame.bind(
            "<Configure>",
            lambda e: self.tables_canvas.configure(scrollregion=self.tables_canvas.bbox("all"))
        )
        
        self.tables_canvas.create_window((0, 0), window=self.tables_scrollable_frame, anchor="nw")
        self.tables_canvas.configure(yscrollcommand=tables_scrollbar.set)
        
        self.tables_canvas.pack(side="left", fill="both", expand=True)
        tables_scrollbar.pack(side="right", fill="y")
        
        # Sezione progresso e azioni
        action_section = ttk.LabelFrame(backup_frame, text="Azioni Backup", padding=10)
        action_section.pack(fill=tk.X, padx=10, pady=5)
        
        # Barra di progresso
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(
            action_section,
            variable=self.progress_var,
            maximum=100,
            length=400
        )
        self.progress_bar.pack(fill=tk.X, pady=(0, 5))
        
        # Label stato progresso
        self.progress_label = ttk.Label(action_section, text="Pronto per il backup")
        self.progress_label.pack(pady=(0, 10))
        
        # Pulsante avvia backup
        self.backup_button = ttk.Button(
            action_section,
            text="üóÑÔ∏è Avvia Backup",
            command=self.start_backup,
            style="Primary.TButton"
        )
        self.backup_button.pack()
    
    def create_restore_tab(self):
        """Crea tab per ripristino backup"""
        restore_frame = ttk.Frame(self.notebook)
        self.notebook.add(restore_frame, text="Ripristina Backup")
        
        # Sezione lista backup
        backups_section = ttk.LabelFrame(restore_frame, text="Backup Disponibili", padding=10)
        backups_section.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # Frame per controlli backup
        backup_controls = ttk.Frame(backups_section)
        backup_controls.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Button(
            backup_controls,
            text="üîÑ Aggiorna Lista",
            command=self.load_backups,
            style="Action.TButton"
        ).pack(side=tk.LEFT)
        
        ttk.Button(
            backup_controls,
            text="üìÅ Apri Cartella Backup",
            command=self.open_backup_folder,
            style="Action.TButton"
        ).pack(side=tk.LEFT, padx=(5, 0))
        
        # Treeview per lista backup
        columns = ("Data", "Ora", "Tabelle", "Dimensione")
        self.backup_tree = ttk.Treeview(backups_section, columns=columns, show="tree headings", height=8)
        
        # Configura colonne
        self.backup_tree.heading("#0", text="Nome Backup")
        self.backup_tree.column("#0", width=150)
        
        for col in columns:
            self.backup_tree.heading(col, text=col)
            self.backup_tree.column(col, width=100)
        
        # Scrollbar per treeview
        backup_scrollbar = ttk.Scrollbar(backups_section, orient="vertical", command=self.backup_tree.yview)
        self.backup_tree.configure(yscrollcommand=backup_scrollbar.set)
        
        self.backup_tree.pack(side="left", fill="both", expand=True)
        backup_scrollbar.pack(side="right", fill="y")
        
        # Sezione azioni ripristino
        restore_action_section = ttk.LabelFrame(restore_frame, text="Azioni Ripristino", padding=10)
        restore_action_section.pack(fill=tk.X, padx=10, pady=5)
        
        # Barra progresso ripristino
        self.restore_progress_var = tk.DoubleVar()
        self.restore_progress_bar = ttk.Progressbar(
            restore_action_section,
            variable=self.restore_progress_var,
            maximum=100,
            length=400
        )
        self.restore_progress_bar.pack(fill=tk.X, pady=(0, 5))
        
        # Label stato ripristino
        self.restore_progress_label = ttk.Label(restore_action_section, text="Seleziona un backup da ripristinare")
        self.restore_progress_label.pack(pady=(0, 10))
        
        # Frame pulsanti ripristino
        restore_buttons = ttk.Frame(restore_action_section)
        restore_buttons.pack()
        
        self.restore_button = ttk.Button(
            restore_buttons,
            text="‚ö†Ô∏è Ripristina Backup Selezionato",
            command=self.start_restore,
            style="Primary.TButton",
            state="disabled"
        )
        self.restore_button.pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(
            restore_buttons,
            text="‚ÑπÔ∏è Info Backup",
            command=self.show_backup_info,
            style="Action.TButton"
        ).pack(side=tk.LEFT)
        
        # Bind selezione backup
        self.backup_tree.bind("<<TreeviewSelect>>", self.on_backup_selected)
    
    def load_tables(self):
        """Carica lista tabelle del database"""
        try:
            tables = backup_manager.get_available_tables()
            
            # Pulisci frame tabelle
            for widget in self.tables_scrollable_frame.winfo_children():
                widget.destroy()
            
            # Crea variabili checkbox per ogni tabella
            self.table_vars = {}
            
            for table in tables:
                var = tk.BooleanVar(value=True)  # Selezionate di default
                self.table_vars[table] = var
                
                checkbox = ttk.Checkbutton(
                    self.tables_scrollable_frame,
                    text=table,
                    variable=var,
                    command=self.update_selected_count
                )
                checkbox.pack(anchor=tk.W, pady=1)
            
            self.update_selected_count()
            
        except Exception as e:
            messagebox.showerror("Errore", f"Errore nel caricamento tabelle: {e}")
    
    def load_backups(self):
        """Carica lista backup disponibili"""
        try:
            # Pulisci treeview
            for item in self.backup_tree.get_children():
                self.backup_tree.delete(item)
            
            backups = backup_manager.get_available_backups()
            
            for backup in backups:
                # Estrai informazioni
                date_str = backup['date'].strftime("%d/%m/%Y") if backup['date'] else "N/A"
                time_str = backup['name'].split('_')[1].replace('-', ':') if '_' in backup['name'] else "N/A"
                
                # Conta tabelle dal file info
                table_count = "N/A"
                try:
                    if 'Numero tabelle:' in backup['info_content']:
                        for line in backup['info_content'].split('\n'):
                            if 'Numero tabelle:' in line:
                                table_count = line.split(':')[1].strip()
                                break
                except:
                    pass
                
                # Calcola dimensione
                size_str = self.get_backup_size(backup['path'])
                
                # Inserisci in treeview
                self.backup_tree.insert(
                    "",
                    tk.END,
                    text=backup['name'],
                    values=(date_str, time_str, table_count, size_str),
                    tags=(backup['path'],)
                )
                
        except Exception as e:
            messagebox.showerror("Errore", f"Errore nel caricamento backup: {e}")
    
    def get_backup_size(self, backup_path):
        """Calcola dimensione totale del backup"""
        try:
            total_size = 0
            for dirpath, dirnames, filenames in os.walk(backup_path):
                for filename in filenames:
                    filepath = os.path.join(dirpath, filename)
                    total_size += os.path.getsize(filepath)
            
            # Converti in formato leggibile
            if total_size < 1024:
                return f"{total_size} B"
            elif total_size < 1024**2:
                return f"{total_size/1024:.1f} KB"
            elif total_size < 1024**3:
                return f"{total_size/(1024**2):.1f} MB"
            else:
                return f"{total_size/(1024**3):.1f} GB"
                
        except:
            return "N/A"
    
    def select_all_tables(self):
        """Seleziona tutte le tabelle"""
        for var in self.table_vars.values():
            var.set(True)
        self.update_selected_count()
    
    def deselect_all_tables(self):
        """Deseleziona tutte le tabelle"""
        for var in self.table_vars.values():
            var.set(False)
        self.update_selected_count()
    
    def update_selected_count(self):
        """Aggiorna conteggio tabelle selezionate"""
        selected = sum(1 for var in self.table_vars.values() if var.get())
        total = len(self.table_vars)
        self.selected_count_label.config(text=f"{selected}/{total} tabelle selezionate")
    
    def start_backup(self):
        """Avvia processo di backup"""
        if self.backup_running:
            return
        
        # Verifica selezione tabelle
        selected_tables = [table for table, var in self.table_vars.items() if var.get()]
        
        if not selected_tables:
            messagebox.showwarning("Attenzione", "Seleziona almeno una tabella per il backup")
            return
        
        # Conferma operazione
        if not messagebox.askyesno(
            "Conferma Backup",
            f"Avviare backup di {len(selected_tables)} tabelle?\n\nQuesto potrebbe richiedere alcuni minuti."
        ):
            return
        
        self.backup_running = True
        self.backup_button.config(state="disabled", text="Backup in corso...")
        self.progress_var.set(0)
        self.progress_label.config(text="Inizializzazione...")
        
        # Avvia backup in thread separato
        backup_thread = threading.Thread(
            target=self._run_backup,
            args=(selected_tables,),
            daemon=True
        )
        backup_thread.start()
    
    def _run_backup(self, selected_tables):
        """Esegue backup in thread separato"""
        try:
            def update_progress(progress, message):
                self.root.after(0, self._update_backup_progress, progress, message)
            
            # Esegui backup
            backup_dir = backup_manager.create_backup(selected_tables, update_progress)
            
            # Completato con successo
            self.root.after(0, self._backup_completed, backup_dir)
            
        except Exception as e:
            self.root.after(0, self._backup_failed, str(e))
    
    def _update_backup_progress(self, progress, message):
        """Aggiorna progresso backup (thread-safe)"""
        self.progress_var.set(progress)
        self.progress_label.config(text=message)
        self.status_label.config(text=f"Backup: {progress:.0f}%", foreground="orange")
    
    def _backup_completed(self, backup_dir):
        """Gestisce completamento backup"""
        self.backup_running = False
        self.backup_button.config(state="normal", text="üóÑÔ∏è Avvia Backup")
        self.progress_var.set(100)
        self.progress_label.config(text="Backup completato con successo!")
        self.status_label.config(text="Backup completato", foreground="green")
        
        # Ricarica lista backup
        self.load_backups()
        
        # Messaggio successo
        messagebox.showinfo(
            "Backup Completato",
            f"Backup creato con successo!\n\nPercorso: {backup_dir}"
        )
    
    def _backup_failed(self, error_message):
        """Gestisce errore backup"""
        self.backup_running = False
        self.backup_button.config(state="normal", text="üóÑÔ∏è Avvia Backup")
        self.progress_var.set(0)
        self.progress_label.config(text="Errore durante backup")
        self.status_label.config(text="Errore backup", foreground="red")
        
        messagebox.showerror("Errore Backup", f"Errore durante backup:\n{error_message}")
    
    def on_backup_selected(self, event):
        """Gestisce selezione backup"""
        selection = self.backup_tree.selection()
        if selection:
            self.restore_button.config(state="normal")
            self.restore_progress_label.config(text="Backup selezionato - Pronto per ripristino")
        else:
            self.restore_button.config(state="disabled")
            self.restore_progress_label.config(text="Seleziona un backup da ripristinare")
    
    def start_restore(self):
        """Avvia processo di ripristino"""
        if self.restore_running:
            return
        
        selection = self.backup_tree.selection()
        if not selection:
            messagebox.showwarning("Attenzione", "Seleziona un backup da ripristinare")
            return
        
        # Ottieni percorso backup
        item = selection[0]
        backup_path = self.backup_tree.item(item, "tags")[0]
        backup_name = self.backup_tree.item(item, "text")
        
        # Conferma operazione (MOLTO IMPORTANTE!)
        if not messagebox.askyesno(
            "‚ö†Ô∏è ATTENZIONE - Ripristino Database",
            f"ATTENZIONE: Il ripristino sovrascriver√† TUTTI i dati attuali del database!\n\n"
            f"Backup da ripristinare: {backup_name}\n\n"
            f"Verr√† creato un backup di emergenza prima del ripristino.\n\n"
            f"Sei SICURO di voler procedere?",
            icon="warning"
        ):
            return
        
        # Seconda conferma
        if not messagebox.askyesno(
            "Conferma Finale",
            "Questa √® la tua ultima possibilit√† di annullare.\n\nProcedere con il ripristino?",
            icon="warning"
        ):
            return
        
        self.restore_running = True
        self.restore_button.config(state="disabled", text="Ripristino in corso...")
        self.restore_progress_var.set(0)
        self.restore_progress_label.config(text="Inizializzazione ripristino...")
        
        # Avvia ripristino in thread separato
        restore_thread = threading.Thread(
            target=self._run_restore,
            args=(backup_path,),
            daemon=True
        )
        restore_thread.start()
    
    def _run_restore(self, backup_path):
        """Esegue ripristino in thread separato"""
        try:
            def update_progress(progress, message):
                self.root.after(0, self._update_restore_progress, progress, message)
            
            # Esegui ripristino
            success = backup_manager.restore_from_backup(backup_path, update_progress)
            
            if success:
                self.root.after(0, self._restore_completed)
            else:
                self.root.after(0, self._restore_failed, "Ripristino fallito")
                
        except Exception as e:
            self.root.after(0, self._restore_failed, str(e))
    
    def _update_restore_progress(self, progress, message):
        """Aggiorna progresso ripristino (thread-safe)"""
        self.restore_progress_var.set(progress)
        self.restore_progress_label.config(text=message)
        self.status_label.config(text=f"Ripristino: {progress:.0f}%", foreground="orange")
    
    def _restore_completed(self):
        """Gestisce completamento ripristino"""
        self.restore_running = False
        self.restore_button.config(state="normal", text="‚ö†Ô∏è Ripristina Backup Selezionato")
        self.restore_progress_var.set(100)
        self.restore_progress_label.config(text="Ripristino completato con successo!")
        self.status_label.config(text="Ripristino completato", foreground="green")
        
        messagebox.showinfo(
            "Ripristino Completato",
            "Database ripristinato con successo!\n\nRiavviare l'applicazione per vedere le modifiche."
        )
    
    def _restore_failed(self, error_message):
        """Gestisce errore ripristino"""
        self.restore_running = False
        self.restore_button.config(state="normal", text="‚ö†Ô∏è Ripristina Backup Selezionato")
        self.restore_progress_var.set(0)
        self.restore_progress_label.config(text="Errore durante ripristino")
        self.status_label.config(text="Errore ripristino", foreground="red")
        
        messagebox.showerror("Errore Ripristino", f"Errore durante ripristino:\n{error_message}")
    
    def show_backup_info(self):
        """Mostra informazioni dettagliate del backup selezionato"""
        selection = self.backup_tree.selection()
        if not selection:
            messagebox.showwarning("Attenzione", "Seleziona un backup per vedere le informazioni")
            return
        
        # Ottieni percorso backup
        item = selection[0]
        backup_path = self.backup_tree.item(item, "tags")[0]
        
        # Leggi file info
        info_file = os.path.join(backup_path, "backup_info.txt")
        if os.path.exists(info_file):
            try:
                with open(info_file, 'r', encoding='utf-8') as f:
                    info_content = f.read()
                
                # Mostra in finestra separata
                info_window = tk.Toplevel(self.root)
                info_window.title("Informazioni Backup")
                info_window.geometry("500x400")
                info_window.resizable(True, True)
                
                # Text widget con scrollbar
                text_frame = ttk.Frame(info_window)
                text_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
                
                text_widget = tk.Text(text_frame, wrap=tk.WORD, font=('Courier', 10))
                scrollbar = ttk.Scrollbar(text_frame, orient="vertical", command=text_widget.yview)
                text_widget.configure(yscrollcommand=scrollbar.set)
                
                text_widget.insert(tk.END, info_content)
                text_widget.config(state=tk.DISABLED)
                
                text_widget.pack(side="left", fill="both", expand=True)
                scrollbar.pack(side="right", fill="y")
                
            except Exception as e:
                messagebox.showerror("Errore", f"Errore nella lettura info backup: {e}")
        else:
            messagebox.showwarning("Attenzione", "File informazioni backup non trovato")
    
    def open_backup_folder(self):
        """Apre cartella backup nell'explorer"""
        try:
            backup_folder = os.path.abspath(backup_manager.backup_base_dir)
            if os.path.exists(backup_folder):
                os.startfile(backup_folder)
            else:
                messagebox.showwarning("Attenzione", "Cartella backup non trovata")
        except Exception as e:
            messagebox.showerror("Errore", f"Errore nell'apertura cartella: {e}")

def show_backup_interface(root, on_back=None):
    """Mostra interfaccia backup"""
    # Pulisci finestra
    for widget in root.winfo_children():
        widget.destroy()
    
    # Crea interfaccia backup
    backup_interface = BackupInterface(root, on_back)
    
    return backup_interface
