"""
Pagina di creazione e gestione ordini per Magazzino Tele
Sistema completo di gestione ordini cliente con autocomplete
Generated by Copilot
"""

import tkinter as tk
from tkinter import ttk, messagebox
from datetime import date, datetime
from typing import List, Dict, Any, Optional, Tuple, Callable
import sys
import os

# Aggiungi il percorso del backend
current_dir = os.path.dirname(os.path.abspath(__file__))
backend_path = os.path.join(current_dir, '..', '..', 'backend')
sys.path.insert(0, backend_path)

# Import backend
try:
    from crud import MagazzinoTeleCRUD
except ImportError as e:
    print(f"Errore import backend in ordini.py: {e}")
    MagazzinoTeleCRUD = None

# Import widget autocomplete
try:
    from ..widgets.autocomplete import AutocompleteEntry
except ImportError:
    # Fallback per import diretto
    widgets_path = os.path.join(current_dir, '..', 'widgets')
    sys.path.insert(0, widgets_path)
    try:
        from autocomplete import AutocompleteEntry
    except ImportError as e:
        print(f"Errore import autocomplete: {e}")
        AutocompleteEntry = None


class CreaOrdinePage:
    """Pagina avanzata per la creazione di nuovi ordini"""
    
    def __init__(self, root: tk.Tk, on_back: Callable[[], None]):
        self.root = root
        self.on_back = on_back
        
        # Inizializza CRUD solo se disponibile
        if MagazzinoTeleCRUD is not None:
            self.crud = MagazzinoTeleCRUD()
        else:
            self.crud = None
            print("‚ö†Ô∏è Backend non disponibile per pagina ordini - modalit√† demo")
        
        # Variabili per l'ordine
        self.cliente_selezionato: Optional[Tuple[str, str]] = None
        self.prodotti_ordine: List[Dict[str, Any]] = []
        
        self.setup_ui()
    
    def setup_ui(self) -> None:
        """Configura l'interfaccia per la creazione ordini"""
        # Frame principale con scrollbar
        canvas = tk.Canvas(self.root)
        scrollbar = ttk.Scrollbar(self.root, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        main_frame = ttk.Frame(scrollable_frame, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Header
        self._create_header(main_frame)
        
        # Sezione dettagli ordine
        self._create_order_details_section(main_frame)
        
        # Sezione selezione cliente
        self._create_customer_section(main_frame)
        
        # Sezione prodotti
        self._create_products_section(main_frame)
        
        # Sezione note
        self._create_notes_section(main_frame)
        
        # Pulsanti finali
        self._create_action_buttons(main_frame)
    
    def _create_header(self, parent):
        """Crea l'header della pagina"""
        header_frame = ttk.Frame(parent)
        header_frame.pack(fill=tk.X, pady=(0, 30))
        
        # Pulsante indietro
        back_button = ttk.Button(
            header_frame,
            text="‚Üê Torna alla Homepage",
            command=self.on_back
        )
        back_button.pack(side=tk.LEFT)
        
        # Titolo
        title_label = ttk.Label(
            header_frame,
            text="Crea Nuovo Ordine",
            font=("Arial", 18, "bold")
        )
        title_label.pack(side=tk.LEFT, padx=(30, 0))
        
        # Stato
        status_label = ttk.Label(
            header_frame,
            text="‚óè Bozza",
            font=("Arial", 12),
            foreground="#f39c12"
        )
        status_label.pack(side=tk.RIGHT)
    
    def _create_order_details_section(self, parent):
        """Crea la sezione dettagli ordine"""
        details_frame = ttk.LabelFrame(parent, text="Dettagli Ordine", padding="15")
        details_frame.pack(fill=tk.X, pady=(0, 20))
        
        # Prima riga: Codice ordine e Data
        row1_frame = ttk.Frame(details_frame)
        row1_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Codice ordine
        ttk.Label(row1_frame, text="Codice Ordine:").pack(side=tk.LEFT)
        self.codice_ordine_var = tk.StringVar()
        self.codice_ordine_entry = ttk.Entry(
            row1_frame, 
            textvariable=self.codice_ordine_var,
            width=20
        )
        self.codice_ordine_entry.pack(side=tk.LEFT, padx=(10, 30))
        
        # Genera codice automatico
        auto_code_button = ttk.Button(
            row1_frame,
            text="üé≤ Auto",
            command=self._generate_order_code,
            width=8
        )
        auto_code_button.pack(side=tk.LEFT, padx=(0, 30))
        
        # Data ordine
        ttk.Label(row1_frame, text="Data Ordine:").pack(side=tk.LEFT)
        self.data_ordine_var = tk.StringVar(value=date.today().strftime('%d/%m/%Y'))
        self.data_ordine_entry = ttk.Entry(
            row1_frame,
            textvariable=self.data_ordine_var,
            width=12
        )
        self.data_ordine_entry.pack(side=tk.LEFT, padx=(10, 0))
        
        # Stato ordine
        row2_frame = ttk.Frame(details_frame)
        row2_frame.pack(fill=tk.X)
        
        ttk.Label(row2_frame, text="Stato:").pack(side=tk.LEFT)
        self.stato_var = tk.StringVar(value="Bozza")
        stato_combo = ttk.Combobox(
            row2_frame,
            textvariable=self.stato_var,
            values=["Bozza", "Confermato", "In Lavorazione", "Spedito", "Completato"],
            state="readonly",
            width=15
        )
        stato_combo.pack(side=tk.LEFT, padx=(10, 0))
    
    def _create_customer_section(self, parent):
        """Crea la sezione selezione cliente"""
        customer_frame = ttk.LabelFrame(parent, text="Cliente", padding="15")
        customer_frame.pack(fill=tk.X, pady=(0, 20))
        
        # Cliente con autocomplete
        ttk.Label(customer_frame, text="Cerca Cliente:").pack(anchor=tk.W)
        
        customer_search_frame = ttk.Frame(customer_frame)
        customer_search_frame.pack(fill=tk.X, pady=(5, 10))
        
        # Usa AutocompleteEntry solo se disponibile
        if AutocompleteEntry is not None and self.crud is not None:
            self.cliente_entry = AutocompleteEntry(
                customer_search_frame,
                self.crud.search_customers_autocomplete,
                width=50
            )
        else:
            # Fallback a Entry normale
            self.cliente_entry = ttk.Entry(customer_search_frame, width=50)
            
        self.cliente_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        # Pulsanti cliente
        customer_buttons_frame = ttk.Frame(customer_frame)
        customer_buttons_frame.pack(fill=tk.X)
        
        ttk.Button(
            customer_buttons_frame,
            text="‚úì Conferma Cliente",
            command=self._confirm_customer
        ).pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(
            customer_buttons_frame,
            text="‚ûï Nuovo Cliente",
            command=self._create_new_customer
        ).pack(side=tk.LEFT)
        
        # Info cliente selezionato
        self.customer_info_frame = ttk.Frame(customer_frame)
        self.customer_info_frame.pack(fill=tk.X, pady=(10, 0))
        
        self.customer_info_label = ttk.Label(
            self.customer_info_frame,
            text="Nessun cliente selezionato",
            foreground="#e74c3c"
        )
        self.customer_info_label.pack(anchor=tk.W)
    
    def _create_products_section(self, parent):
        """Crea la sezione gestione prodotti"""
        products_frame = ttk.LabelFrame(parent, text="Prodotti Ordine", padding="15")
        products_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 20))
        
        # Controlli per aggiungere prodotti
        add_product_frame = ttk.Frame(products_frame)
        add_product_frame.pack(fill=tk.X, pady=(0, 15))
        
        # Ricerca modello
        ttk.Label(add_product_frame, text="Modello:").grid(row=0, column=0, sticky=tk.W, padx=(0, 10))
        
        # Usa AutocompleteEntry solo se disponibile
        if AutocompleteEntry is not None and self.crud is not None:
            self.modello_entry = AutocompleteEntry(
                add_product_frame,
                self.crud.search_models_autocomplete,
                width=30
            )
        else:
            # Fallback a Entry normale
            self.modello_entry = ttk.Entry(add_product_frame, width=30)
            
        self.modello_entry.grid(row=0, column=1, padx=(0, 10))
        
        # Colore
        ttk.Label(add_product_frame, text="Colore:").grid(row=0, column=2, sticky=tk.W, padx=(10, 10))
        self.colore_var = tk.StringVar()
        self.colore_combo = ttk.Combobox(
            add_product_frame,
            textvariable=self.colore_var,
            width=20
        )
        self.colore_combo.grid(row=0, column=3, padx=(0, 10))
        self._load_colors()
        
        # Quantit√†
        ttk.Label(add_product_frame, text="Quantit√†:").grid(row=0, column=4, sticky=tk.W, padx=(10, 10))
        self.quantita_var = tk.StringVar(value="1")
        quantita_entry = ttk.Entry(
            add_product_frame,
            textvariable=self.quantita_var,
            width=8
        )
        quantita_entry.grid(row=0, column=5, padx=(0, 10))
        
        # Pulsante aggiungi
        add_button = ttk.Button(
            add_product_frame,
            text="‚ûï Aggiungi",
            command=self._add_product_to_order,
            style="Accent.TButton"
        )
        add_button.grid(row=0, column=6, padx=(10, 0))
        
        # Lista prodotti aggiunti
        self.products_tree = ttk.Treeview(
            products_frame,
            columns=('modello', 'colore', 'quantita', 'note'),
            show='headings',
            height=8
        )
        
        # Intestazioni
        self.products_tree.heading('modello', text='Modello')
        self.products_tree.heading('colore', text='Colore')
        self.products_tree.heading('quantita', text='Quantit√†')
        self.products_tree.heading('note', text='Note')
        
        # Larghezza colonne
        self.products_tree.column('modello', width=200)
        self.products_tree.column('colore', width=150)
        self.products_tree.column('quantita', width=80)
        self.products_tree.column('note', width=200)
        
        self.products_tree.pack(fill=tk.BOTH, expand=True, pady=(10, 10))
        
        # Pulsanti gestione prodotti
        products_buttons_frame = ttk.Frame(products_frame)
        products_buttons_frame.pack(fill=tk.X)
        
        ttk.Button(
            products_buttons_frame,
            text="‚úèÔ∏è Modifica",
            command=self._edit_product
        ).pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(
            products_buttons_frame,
            text="üóëÔ∏è Rimuovi",
            command=self._remove_product
        ).pack(side=tk.LEFT)
        
        # Summary quantit√† totale
        self.total_label = ttk.Label(
            products_buttons_frame,
            text="Totale pezzi: 0",
            font=("Arial", 10, "bold")
        )
        self.total_label.pack(side=tk.RIGHT)
    
    def _create_notes_section(self, parent):
        """Crea la sezione note"""
        notes_frame = ttk.LabelFrame(parent, text="Note Ordine", padding="15")
        notes_frame.pack(fill=tk.X, pady=(0, 20))
        
        self.notes_text = tk.Text(
            notes_frame,
            height=4,
            wrap=tk.WORD
        )
        self.notes_text.pack(fill=tk.X)
        
        # Scrollbar per le note
        notes_scrollbar = ttk.Scrollbar(notes_frame, orient="vertical", command=self.notes_text.yview)
        self.notes_text.configure(yscrollcommand=notes_scrollbar.set)
    
    def _create_action_buttons(self, parent):
        """Crea i pulsanti finali"""
        buttons_frame = ttk.Frame(parent)
        buttons_frame.pack(fill=tk.X)
        
        # Pulsanti di azione
        ttk.Button(
            buttons_frame,
            text="üíæ Salva Bozza",
            command=lambda: self._save_order(as_draft=True)
        ).pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(
            buttons_frame,
            text="‚úÖ Conferma Ordine",
            command=lambda: self._save_order(as_draft=False),
            style="Accent.TButton"
        ).pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(
            buttons_frame,
            text="üóëÔ∏è Annulla",
            command=self._cancel_order
        ).pack(side=tk.LEFT)
        
        # Info validazione
        self.validation_label = ttk.Label(
            buttons_frame,
            text="",
            foreground="#e74c3c"
        )
        self.validation_label.pack(side=tk.RIGHT)
    
    # ==================== METODI DI GESTIONE ====================
    
    def _generate_order_code(self):
        """Genera un codice ordine automatico"""
        timestamp = datetime.now().strftime("%y%m%d%H%M")
        self.codice_ordine_var.set(f"ORD{timestamp}")
    
    def _load_colors(self):
        """Carica i colori dal database"""
        if not self.crud:
            # Modalit√† demo - colori hardcoded
            self.colore_combo['values'] = ["Rosso", "Verde", "Blu", "Giallo", "Bianco", "Nero"]
            return
            
        try:
            if self.crud.connect():
                colors = self.crud.read_colori_schema()
                self.colore_combo['values'] = colors
                self.crud.disconnect()
        except Exception as e:
            messagebox.showerror("Errore", f"Errore caricamento colori: {e}")
    
    def _confirm_customer(self):
        """Conferma la selezione del cliente"""
        if hasattr(self.cliente_entry, 'get_selected_item'):
            # AutocompleteEntry
            selected = self.cliente_entry.get_selected_item()
        else:
            # Entry normale - modalit√† demo
            text = self.cliente_entry.get()
            selected = (text, "Demo Cliente") if text else None
            
        if selected:
            self.cliente_selezionato = selected
            self.customer_info_label.config(
                text=f"‚úì Cliente: {selected[0]} - {selected[1]}",
                foreground="#27ae60"
            )
            self._validate_form()
        else:
            messagebox.showwarning("Attenzione", "Inserisci un nome cliente")
    
    def _create_new_customer(self):
        """Apre dialog per creare nuovo cliente"""
        messagebox.showinfo("Info", "Funzione creazione nuovo cliente in sviluppo")
    
    def _add_product_to_order(self):
        """Aggiunge un prodotto all'ordine"""
        if hasattr(self.modello_entry, 'get_selected_item'):
            # AutocompleteEntry
            modello = self.modello_entry.get_selected_item()
            if not modello:
                modello_text = self.modello_entry.get()
                modello = (modello_text, "Demo Modello") if modello_text else None
        else:
            # Entry normale - modalit√† demo
            modello_text = self.modello_entry.get()
            modello = (modello_text, "Demo Modello") if modello_text else None
        
        colore = self.colore_var.get()
        quantita_str = self.quantita_var.get()
        
        if not modello:
            messagebox.showwarning("Attenzione", "Inserisci un modello")
            return
        
        if not colore:
            messagebox.showwarning("Attenzione", "Seleziona un colore")
            return
        
        try:
            quantita = int(quantita_str)
            if quantita <= 0:
                raise ValueError("Quantit√† deve essere positiva")
        except ValueError:
            messagebox.showerror("Errore", "Quantit√† non valida")
            return
        
        # Aggiungi alla lista
        product_data = {
            'modello': modello,
            'colore': colore,
            'quantita': quantita,
            'note': ''
        }
        
        self.prodotti_ordine.append(product_data)
        
        # Aggiungi alla treeview
        self.products_tree.insert('', 'end', values=(
            f"{modello[0]} - {modello[1]}" if len(modello) > 1 else str(modello[0]),
            colore,
            quantita,
            ''
        ))
        
        # Reset form
        if hasattr(self.modello_entry, 'clear_selection'):
            self.modello_entry.clear_selection()
        else:
            self.modello_entry.delete(0, tk.END)
            
        self.colore_var.set('')
        self.quantita_var.set('1')
        
        # Aggiorna totale
        self._update_total()
        self._validate_form()
    
    def _edit_product(self):
        """Modifica prodotto selezionato"""
        selection = self.products_tree.selection()
        if not selection:
            messagebox.showwarning("Attenzione", "Seleziona un prodotto da modificare")
            return
        
        messagebox.showinfo("Info", "Funzione modifica prodotto in sviluppo")
    
    def _remove_product(self):
        """Rimuove prodotto selezionato"""
        selection = self.products_tree.selection()
        if not selection:
            messagebox.showwarning("Attenzione", "Seleziona un prodotto da rimuovere")
            return
        
        # Rimuovi dalla treeview
        item_index = self.products_tree.index(selection[0])
        self.products_tree.delete(selection[0])
        
        # Rimuovi dalla lista
        if 0 <= item_index < len(self.prodotti_ordine):
            del self.prodotti_ordine[item_index]
        
        # Aggiorna totale
        self._update_total()
        self._validate_form()
    
    def _update_total(self):
        """Aggiorna il totale dei pezzi"""
        total = sum(product['quantita'] for product in self.prodotti_ordine)
        self.total_label.config(text=f"Totale pezzi: {total}")
    
    def _validate_form(self):
        """Valida il form ordine"""
        errors = []
        
        if not self.codice_ordine_var.get().strip():
            errors.append("Codice ordine mancante")
        
        if not self.cliente_selezionato:
            errors.append("Cliente non selezionato")
        
        if not self.prodotti_ordine:
            errors.append("Nessun prodotto aggiunto")
        
        if errors:
            self.validation_label.config(text=" | ".join(errors))
            return False
        else:
            self.validation_label.config(text="‚úì Ordine valido")
            return True
    
    def _save_order(self, as_draft=True):
        """Salva l'ordine nel database"""
        if not self._validate_form():
            messagebox.showerror("Errore", "Correggi gli errori prima di salvare")
            return
        
        try:
            # Qui implementeremo il salvataggio nel database
            status = "Bozza" if as_draft else "Confermato"
            messagebox.showinfo("Successo", f"Ordine salvato come {status}")
            
            if not as_draft:
                self.on_back()  # Torna alla homepage dopo conferma
        
        except Exception as e:
            messagebox.showerror("Errore", f"Errore salvataggio ordine: {e}")
    
    def _cancel_order(self):
        """Annulla la creazione dell'ordine"""
        if self.prodotti_ordine or self.cliente_selezionato:
            result = messagebox.askyesno(
                "Conferma", 
                "Sei sicuro di voler annullare? Tutti i dati inseriti verranno persi."
            )
            if result:
                self.on_back()
        else:
            self.on_back()
    
    def show(self):
        """Mostra la pagina di creazione ordini"""
        self.setup_ui()
    
    def destroy(self):
        """Rimuove tutti i widget della pagina"""
        for widget in self.root.winfo_children():
            widget.destroy()
        
       