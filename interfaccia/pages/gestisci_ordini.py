"""
Pagina di gestione ordini per Magazzino Tele
Sistema completo di visualizzazione, ricerca e modifica ordini
Generated by Copilot
"""

import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime
from typing import List, Dict, Any, Optional, Callable, Tuple, Union

# Type alias per la tupla dei dati ordine - Generated by Copilot
OrderDataTuple = Tuple[int, str, str, str, str, str, int, str, str]
# (id, data, cliente, codice_cliente, modello, colore, quantita, note, evaso_text)
import sys
import os

# Aggiungi il percorso del backend
current_dir = os.path.dirname(os.path.abspath(__file__))
backend_path = os.path.join(current_dir, '..', '..', 'backend')
sys.path.insert(0, backend_path)

# Import backend
try:
    from crud import MagazzinoTeleCRUD
except ImportError as e:
    print(f"Errore import backend in gestisci_ordini.py: {e}")
    MagazzinoTeleCRUD = None


class GestisciOrdiniPage:
    """Pagina avanzata per la gestione degli ordini esistenti"""
    
    def __init__(self, root: tk.Tk, on_back: Callable[[], None], on_create_order: Callable[[], None]):
        self.root = root
        self.on_back = on_back
        self.on_create_order = on_create_order
        
        # Configura stili personalizzati per bottoni bianchi
        # Generated by Copilot
        self._setup_button_styles()
        
        # Inizializza CRUD solo se disponibile
        if MagazzinoTeleCRUD is not None:
            self.crud = MagazzinoTeleCRUD()
        else:
            self.crud = None
            print("‚ö†Ô∏è Backend non disponibile per gestione ordini - modalit√† demo")
        
        # Variabili per gestione dati
        self.ordini_data: List[Dict[str, Any]] = []
        self.ordini_filtered: List[Dict[str, Any]] = []
        self.colori_disponibili: List[str] = []
        self.colore_selezionato: Optional[str] = None
        
        # Variabili UI
        self.search_visible = False
        self.search_frame = None
        self.search_var = tk.StringVar()
        self.search_by_nome = tk.BooleanVar(value=True)
        self.search_by_codice = tk.BooleanVar(value=True)
        self.search_by_modello = tk.BooleanVar(value=True)
        self.search_by_data = tk.BooleanVar(value=False)
        
        self.setup_ui()
        self.load_data()
    
    def _setup_button_styles(self) -> None:
        """
        Configura stili personalizzati per bottoni bianchi
        Generated by Copilot
        """
        style = ttk.Style()
        
        # Stile per pulsanti bianchi con testo nero
        style.configure("WhiteButton.TButton",
                       background="white",
                       foreground="black",
                       borderwidth=1,
                       relief="solid")
        
        # Stile per pulsante di successo (bianco con bordo verde)
        style.configure("Success.TButton", 
                       background="white",
                       foreground="green",
                       borderwidth=2,
                       relief="solid")
        
        # Stile per pulsante primario (bianco con bordo blu)
        style.configure("Primary.TButton", 
                       background="white",
                       foreground="blue", 
                       borderwidth=2,
                       relief="solid")
        
        # Stile per pulsante di avvertimento (bianco con bordo arancione)
        style.configure("Warning.TButton", 
                       background="white",
                       foreground="orange",
                       borderwidth=2,
                       relief="solid")
        
        # Stile per pulsante di pericolo (bianco con bordo rosso)
        style.configure("Danger.TButton",
                       background="white", 
                       foreground="red",
                       borderwidth=2,
                       relief="solid")
        
        # Configura effetti hover per tutti i bottoni bianchi
        style.map("WhiteButton.TButton",
                 background=[('active', '#f0f0f0')])
        style.map("Success.TButton",
                 background=[('active', '#f0f8f0')])
        style.map("Primary.TButton", 
                 background=[('active', '#f0f0f8')])
        style.map("Warning.TButton",
                 background=[('active', '#f8f4f0')])
        style.map("Danger.TButton",
                 background=[('active', '#f8f0f0')])
    
    def setup_ui(self) -> None:
        """Configura l'interfaccia per la gestione ordini"""
        # Frame principale
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Header con pulsanti
        self._create_header(main_frame)
        
        # Frame principale con 2 colonne: tabella + lista colori
        content_frame = ttk.Frame(main_frame)
        content_frame.pack(fill=tk.BOTH, expand=True, pady=(20, 0))
        
        # Configura grid per layout responsivo
        content_frame.grid_columnconfigure(0, weight=3)  # Tabella principale
        content_frame.grid_columnconfigure(1, weight=1)  # Lista colori
        content_frame.grid_rowconfigure(0, weight=1)
        
        # Frame sinistro: tabella ordini
        self._create_orders_section(content_frame)
        
        # Frame destro: lista colori
        self._create_colors_section(content_frame)
    
    def _create_header(self, parent: ttk.Frame) -> None:
        """Crea l'header con pulsanti di navigazione"""
        header_frame = ttk.Frame(parent)
        header_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Pulsanti principali con tipizzazione corretta
        # Generated by Copilot
        buttons_config: List[Dict[str, Any]] = [
            {"text": "Crea Nuovo Ordine", "command": self.on_create_order, "style": "Success.TButton"},
            {"text": "Magazzino Tele", "command": self._placeholder_magazzino, "style": "WhiteButton.TButton"},
            {"text": "üîç Cerca", "command": self._toggle_search, "style": "Primary.TButton"},
            {"text": "Modifica Ordine", "command": self._modify_selected_order, "style": "Warning.TButton"}
        ]
        
        for config in buttons_config:
            btn = ttk.Button(
                header_frame,
                text=str(config["text"]),
                command=config["command"],
                style=str(config.get("style", "WhiteButton.TButton")),
                width=15
            )
            btn.pack(side=tk.LEFT, padx=(0, 10))
        
        # Pulsante torna indietro (a destra)
        back_btn = ttk.Button(
            header_frame,
            text="‚Üê Torna alla Homepage",
            command=self.on_back,
            style="WhiteButton.TButton"
        )
        back_btn.pack(side=tk.RIGHT)
    
    def _create_orders_section(self, parent):
        """Crea la sezione principale con tabella ordini"""
        orders_frame = ttk.LabelFrame(parent, text="Ordini Registrati", padding="15")
        orders_frame.grid(row=0, column=0, sticky="nsew", padx=(0, 10))
        
        # Frame per la barra di ricerca (inizialmente nascosta)
        self.search_container = ttk.Frame(orders_frame)
        self.search_container.pack(fill=tk.X, pady=(0, 10))
        
        # Tabella ordini con scrollbar
        table_frame = ttk.Frame(orders_frame)
        table_frame.pack(fill=tk.BOTH, expand=True)
        
        # Configurazione colonne tabella
        columns = ('id', 'data', 'cliente', 'codice_cliente', 'modello', 'colore', 'quantita', 'note', 'evaso')
        self.orders_tree = ttk.Treeview(
            table_frame,
            columns=columns,
            show='headings',
            height=15
        )
        
        # Intestazioni colonne
        headers = {
            'id': ('ID', 50),
            'data': ('Data', 100),
            'cliente': ('Nome Cliente', 150),
            'codice_cliente': ('Cod. Cliente', 100),
            'modello': ('Modello', 120),
            'colore': ('Colore', 100),
            'quantita': ('Qt√†', 60),
            'note': ('Note', 120),
            'evaso': ('Evaso', 60)
        }
        
        for col, (text, width) in headers.items():
            self.orders_tree.heading(col, text=text, command=lambda c=col: self._sort_by_column(c))
            self.orders_tree.column(col, width=width, minwidth=50)
        
        # Scrollbars per la tabella
        v_scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.orders_tree.yview)
        h_scrollbar = ttk.Scrollbar(table_frame, orient="horizontal", command=self.orders_tree.xview)
        self.orders_tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)
        
        # Pack tabella e scrollbars
        self.orders_tree.grid(row=0, column=0, sticky="nsew")
        v_scrollbar.grid(row=0, column=1, sticky="ns")
        h_scrollbar.grid(row=1, column=0, sticky="ew")
        
        table_frame.grid_rowconfigure(0, weight=1)
        table_frame.grid_columnconfigure(0, weight=1)
        
        # Bind eventi tabella
        self.orders_tree.bind('<Double-1>', self._on_order_double_click)
        self.orders_tree.bind('<Button-3>', self._on_order_right_click)  # Menu contestuale
        
        # Info footer
        self.info_label = ttk.Label(
            orders_frame,
            text="Totale ordini: 0 | Evasi: 0 | In lavorazione: 0",
            font=("Arial", 9)
        )
        self.info_label.pack(pady=(10, 0))
    
    def _create_colors_section(self, parent):
        """Crea la sezione laterale con lista colori"""
        colors_frame = ttk.LabelFrame(parent, text="Filtra per Colore", padding="15")
        colors_frame.grid(row=0, column=1, sticky="nsew")
        
        # Lista colori con scrollbar
        colors_list_frame = ttk.Frame(colors_frame)
        colors_list_frame.pack(fill=tk.BOTH, expand=True)
        
        self.colors_listbox = tk.Listbox(
            colors_list_frame,
            font=("Segoe UI", 10),
            selectmode=tk.SINGLE,
            bg='white',
            selectbackground='#0078d4',
            selectforeground='white'
        )
        
        colors_scrollbar = ttk.Scrollbar(colors_list_frame, orient="vertical", command=self.colors_listbox.yview)
        self.colors_listbox.configure(yscrollcommand=colors_scrollbar.set)
        
        self.colors_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        colors_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Bind eventi lista colori
        self.colors_listbox.bind('<<ListboxSelect>>', self._on_color_select)
        
        # Pulsanti gestione filtri
        filter_buttons_frame = ttk.Frame(colors_frame)
        filter_buttons_frame.pack(fill=tk.X, pady=(10, 0))
        
        ttk.Button(
            filter_buttons_frame,
            text="üóëÔ∏è Rimuovi Filtro",
            command=self._clear_color_filter,
            width=15,
            style="WhiteButton.TButton"
        ).pack(fill=tk.X, pady=(0, 5))
        
        ttk.Button(
            filter_buttons_frame,
            text="üîÑ Aggiorna",
            command=self.load_data,
            width=15,
            style="WhiteButton.TButton"
        ).pack(fill=tk.X)
    
    def _toggle_search(self):
        """Mostra/nasconde la barra di ricerca"""
        if self.search_visible:
            self._hide_search()
        else:
            self._show_search()
    
    def _show_search(self):
        """Mostra la barra di ricerca avanzata"""
        if self.search_frame:
            self.search_frame.destroy()
        
        self.search_frame = ttk.LabelFrame(self.search_container, text="Ricerca Avanzata", padding="10")
        self.search_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Prima riga: campo di ricerca
        search_entry_frame = ttk.Frame(self.search_frame)
        search_entry_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(search_entry_frame, text="Cerca:").pack(side=tk.LEFT)
        search_entry = ttk.Entry(
            search_entry_frame,
            textvariable=self.search_var,
            font=("Segoe UI", 10),
            width=30
        )
        search_entry.pack(side=tk.LEFT, padx=(10, 10), fill=tk.X, expand=True)
        search_entry.bind('<KeyRelease>', self._on_search_change)
        
        # Seconda riga: checkbox per criteri di ricerca
        criteria_frame = ttk.Frame(self.search_frame)
        criteria_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(criteria_frame, text="Cerca in:").pack(side=tk.LEFT)
        
        checkboxes = [
            ("Nome Cliente", self.search_by_nome),
            ("Codice Cliente", self.search_by_codice),
            ("Modello", self.search_by_modello),
            ("Data", self.search_by_data)
        ]
        
        for text, var in checkboxes:
            cb = ttk.Checkbutton(
                criteria_frame,
                text=text,
                variable=var,
                command=self._on_search_change
            )
            cb.pack(side=tk.LEFT, padx=(10, 0))
        
        # Terza riga: pulsanti azione
        action_frame = ttk.Frame(self.search_frame)
        action_frame.pack(fill=tk.X)
        
        ttk.Button(
            action_frame,
            text="üîç Cerca",
            command=self._apply_search,
            style="Primary.TButton"
        ).pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(
            action_frame,
            text="üóëÔ∏è Pulisci",
            command=self._clear_search,
            style="WhiteButton.TButton"
        ).pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(
            action_frame,
            text="‚úñ Chiudi",
            command=self._hide_search,
            style="WhiteButton.TButton"
        ).pack(side=tk.RIGHT)
        
        self.search_visible = True
        search_entry.focus()
    
    def _hide_search(self):
        """Nasconde la barra di ricerca"""
        if self.search_frame:
            self.search_frame.destroy()
            self.search_frame = None
        self.search_visible = False
        self._clear_search()
    
    def _on_search_change(self, event=None):
        """Applica la ricerca automaticamente mentre si digita"""
        self.root.after(300, self._apply_search)  # Debounce di 300ms
    
    def _apply_search(self):
        """Applica i filtri di ricerca"""
        search_text = self.search_var.get().lower().strip()
        
        if not search_text:
            # Nessuna ricerca - mostra tutti i dati
            self.ordini_filtered = self.ordini_data.copy()
        else:
            # Applica ricerca
            if self.crud and len(self.ordini_data) > 0:
                # Usa ricerca database se disponibile
                try:
                    if self.crud.connect():
                        search_criteria = {}
                        
                        if self.search_by_nome.get():
                            search_criteria['cliente_nome'] = search_text
                        if self.search_by_codice.get():
                            search_criteria['codice_cliente'] = search_text  
                        if self.search_by_modello.get():
                            search_criteria['modello'] = search_text
                        if self.search_by_data.get():
                            search_criteria['data'] = search_text
                        
                        # Se nessun criterio selezionato, cerca in tutti
                        if not any([self.search_by_nome.get(), self.search_by_codice.get(), 
                                   self.search_by_modello.get(), self.search_by_data.get()]):
                            search_criteria = {
                                'cliente_nome': search_text,
                                'codice_cliente': search_text,
                                'modello': search_text,
                                'data': search_text
                            }
                        
                        self.ordini_filtered = self.crud.search_orders(search_criteria)
                        self.crud.disconnect()
                    else:
                        # Fallback a ricerca locale
                        self._apply_local_search(search_text)
                except Exception as e:
                    print(f"Errore ricerca database: {e}")
                    self._apply_local_search(search_text)
            else:
                # Ricerca locale sui dati in memoria
                self._apply_local_search(search_text)
        
        # Applica anche il filtro colore se attivo
        if self.colore_selezionato:
            self.ordini_filtered = [
                o for o in self.ordini_filtered 
                if self.colore_selezionato.lower() in o.get('colore', '').lower()
            ]
        
        self._update_orders_table()
    
    def _apply_local_search(self, search_text: str):
        """Applica ricerca locale sui dati in memoria"""
        self.ordini_filtered = []
        for ordine in self.ordini_data:
            match = False
            
            # Ricerca per nome cliente
            if self.search_by_nome.get() and search_text in ordine.get('cliente', '').lower():
                match = True
            
            # Ricerca per codice cliente
            if self.search_by_codice.get() and search_text in ordine.get('codice_cliente', '').lower():
                match = True
            
            # Ricerca per modello
            if self.search_by_modello.get() and search_text in ordine.get('modello', '').lower():
                match = True
            
            # Ricerca per data
            if self.search_by_data.get() and search_text in ordine.get('data', '').lower():
                match = True
            
            # Se nessun criterio selezionato, cerca in tutti i campi
            if not any([self.search_by_nome.get(), self.search_by_codice.get(), 
                       self.search_by_modello.get(), self.search_by_data.get()]):
                if (search_text in ordine.get('cliente', '').lower() or
                    search_text in ordine.get('codice_cliente', '').lower() or
                    search_text in ordine.get('modello', '').lower() or
                    search_text in ordine.get('data', '').lower()):
                    match = True
            
            if match:
                self.ordini_filtered.append(ordine)
    
    def _clear_search(self):
        """Pulisce la ricerca"""
        self.search_var.set("")
        self._apply_search()
    
    def _on_color_select(self, event=None):
        """Gestisce la selezione di un colore per filtrare"""
        selection = self.colors_listbox.curselection()
        if selection:
            index = selection[0]
            if index == 0:  # "Tutti i colori"
                self.colore_selezionato = None
            else:
                self.colore_selezionato = self.colori_disponibili[index - 1]
            
            self._apply_search()  # Riapplica i filtri
    
    def _clear_color_filter(self):
        """Rimuove il filtro colore"""
        self.colors_listbox.selection_clear(0, tk.END)
        self.colors_listbox.selection_set(0)  # Seleziona "Tutti i colori"
        self.colore_selezionato = None
        self._apply_search()
    
    def _sort_by_column(self, col):
        """Ordina la tabella per colonna (placeholder)"""
        # TODO: Implementare ordinamento
        messagebox.showinfo("Info", f"Ordinamento per {col} - Funzione in sviluppo")
    
    def _on_order_double_click(self, event):
        """Gestisce doppio click su ordine per modifica"""
        selection = self.orders_tree.selection()
        if selection:
            item = self.orders_tree.item(selection[0])
            order_data = item['values']
            self._open_modify_dialog(order_data)
    
    def _on_order_right_click(self, event):
        """Menu contestuale ordine (placeholder)"""
        # TODO: Implementare menu contestuale
        pass
    
    def _open_modify_dialog(self, order_data):
        """Apre finestra di modifica ordine"""
        ModifyOrderDialog(self.root, order_data, self._on_order_modified)
    
    def _on_order_modified(self, order_id, new_data):
        """Callback quando un ordine viene modificato"""
        if not self.crud:
            messagebox.showerror("Errore", "Backend non disponibile")
            return
        
        try:
            if self.crud.connect():
                if new_data is None:
                    # Eliminazione ordine
                    success = self.crud.delete_order(order_id)
                    if success:
                        messagebox.showinfo("Successo", f"Ordine {order_id} eliminato con successo")
                    else:
                        messagebox.showerror("Errore", f"Errore nell'eliminazione dell'ordine {order_id}")
                else:
                    # Modifica ordine
                    success = self.crud.update_order_info(order_id, new_data)
                    if success:
                        messagebox.showinfo("Successo", f"Ordine {order_id} modificato con successo")
                    else:
                        messagebox.showerror("Errore", f"Errore nella modifica dell'ordine {order_id}")
                
                self.crud.disconnect()
                self.load_data()  # Ricarica i dati
            else:
                messagebox.showerror("Errore", "Impossibile connettersi al database")
        except Exception as e:
            print(f"Errore modifica ordine: {e}")
            messagebox.showerror("Errore", f"Errore nella modifica: {e}")
            self.load_data()  # Ricarica comunque i dati
    
    def _modify_selected_order(self):
        """Modifica l'ordine selezionato"""
        selection = self.orders_tree.selection()
        if not selection:
            messagebox.showwarning("Attenzione", "Seleziona un ordine da modificare")
            return
        
        item = self.orders_tree.item(selection[0])
        order_data = item['values']
        self._open_modify_dialog(order_data)
    
    def _placeholder_magazzino(self):
        """Placeholder per pagina magazzino"""
        messagebox.showinfo("Info", "Pagina Magazzino - In sviluppo")
    
    def load_data(self):
        """Carica dati ordini e colori dal database"""
        if not self.crud:
            self._load_demo_data()
            return
        
        try:
            if self.crud.connect():
                # Carica ordini dal database
                self.ordini_data = self.crud.get_all_orders()
                print(f"‚úì Caricati {len(self.ordini_data)} ordini dal database")
                
                # Carica colori
                try:
                    self.colori_disponibili = self.crud.read_colori_schema()
                except Exception as color_error:
                    print(f"‚ö†Ô∏è Errore caricamento colori: {color_error}")
                    self.colori_disponibili = ['ROSSO', 'BLU', 'VERDE', 'GIALLO', 'BIANCO', 'NERO']
                
                self.crud.disconnect()
                
                # Se non ci sono ordini nel database, usa dati demo per testing
                if not self.ordini_data:
                    print("‚ö†Ô∏è Nessun ordine nel database, usando dati demo")
                    self._load_demo_data()
                    
        except Exception as e:
            print(f"Errore caricamento dati: {e}")
            self._load_demo_data()
        
        self._update_colors_list()
        self._apply_search()
    
    def _load_demo_data(self):
        """Carica dati demo per test"""
        self.ordini_data = [
            {
                'id': 1, 'data': '2025-08-10', 'cliente': 'Mario Rossi', 'codice_cliente': 'MR001',
                'modello': 'Modello A', 'colore': 'ROSSO', 'quantita': 10, 'note': 'Urgente', 'evaso': False
            },
            {
                'id': 2, 'data': '2025-08-09', 'cliente': 'Giulia Verdi', 'codice_cliente': 'GV002',
                'modello': 'Modello B', 'colore': 'BLU', 'quantita': 5, 'note': '', 'evaso': True
            },
            {
                'id': 3, 'data': '2025-08-08', 'cliente': 'Luca Bianchi', 'codice_cliente': 'LB003',
                'modello': 'Modello C', 'colore': 'VERDE', 'quantita': 15, 'note': 'Controllare qualit√†', 'evaso': False
            },
            {
                'id': 4, 'data': '2025-08-07', 'cliente': 'Anna Neri', 'codice_cliente': 'AN004',
                'modello': 'Modello A', 'colore': 'GIALLO', 'quantita': 8, 'note': '', 'evaso': True
            },
            {
                'id': 5, 'data': '2025-08-06', 'cliente': 'Franco Blu', 'codice_cliente': 'FB005',
                'modello': 'Modello D', 'colore': 'ROSSO', 'quantita': 12, 'note': 'Spedizione express', 'evaso': False
            }
        ]
        
        self.colori_disponibili = ['ROSSO', 'BLU', 'VERDE', 'GIALLO', 'BIANCO', 'NERO']
    
    def _update_colors_list(self):
        """Aggiorna la lista colori"""
        self.colors_listbox.delete(0, tk.END)
        self.colors_listbox.insert(0, "üìã Tutti i colori")
        
        for colore in self.colori_disponibili:
            self.colors_listbox.insert(tk.END, f"üé® {colore}")
        
        # Seleziona "Tutti i colori" di default
        self.colors_listbox.selection_set(0)
    
    def _update_orders_table(self):
        """Aggiorna la tabella ordini"""
        # Pulisci tabella
        for item in self.orders_tree.get_children():
            self.orders_tree.delete(item)
        
        # Popola con dati filtrati
        for ordine in self.ordini_filtered:
            evaso_text = "‚úÖ S√¨" if ordine['evaso'] else "‚ùå No"
            
            self.orders_tree.insert('', 'end', values=(
                ordine['id'],
                ordine['data'],
                ordine['cliente'],
                ordine['codice_cliente'],
                ordine['modello'],
                ordine['colore'],
                ordine['quantita'],
                ordine['note'],
                evaso_text
            ))
        
        # Aggiorna statistiche
        total = len(self.ordini_filtered)
        evasi = sum(1 for o in self.ordini_filtered if o['evaso'])
        in_lavorazione = total - evasi
        
        self.info_label.config(
            text=f"Totale ordini: {total} | Evasi: {evasi} | In lavorazione: {in_lavorazione}"
        )
    
    def show(self):
        """Mostra la pagina"""
        pass
    
    def destroy(self):
        """Rimuove tutti i widget della pagina"""
        for widget in self.root.winfo_children():
            widget.destroy()


class ModifyOrderDialog:
    """
    Finestra di dialogo per modificare un ordine esistente
    Generated by Copilot
    """
    
    def __init__(self, parent: tk.Tk, order_data: OrderDataTuple, callback: Callable[[int, Optional[Dict[str, Any]]], None]) -> None:
        """
        Inizializza la finestra di dialogo per la modifica ordini
        
        Args:
            parent: Finestra principale dell'applicazione
            order_data: Tupla contenente i dati dell'ordine da modificare
            callback: Funzione di callback per gestire il salvataggio/eliminazione
        Generated by Copilot
        """
        self.parent: tk.Tk = parent
        self.order_data: OrderDataTuple = order_data
        self.callback: Callable[[int, Optional[Dict[str, Any]]], None] = callback
        
        # Inizializzazione widget Text per le note
        self.note_text: tk.Text = tk.Text()
        
        self.dialog: tk.Toplevel = tk.Toplevel(parent)
        self.dialog.title("Modifica Ordine")
        self.dialog.geometry("500x450")  # Aumentata altezza per il pulsante
        self.dialog.resizable(False, False)
        self.dialog.transient(parent)
        self.dialog.grab_set()
        
        # Centra la finestra
        self.dialog.update_idletasks()
        x = (self.dialog.winfo_screenwidth() - self.dialog.winfo_width()) // 2
        y = (self.dialog.winfo_screenheight() - self.dialog.winfo_height()) // 2
        self.dialog.geometry(f"+{x}+{y}")
        
        self.setup_ui()
    
    def setup_ui(self):
        """Configura l'interfaccia della finestra"""
        main_frame = ttk.Frame(self.dialog, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Titolo
        title_label = ttk.Label(
            main_frame,
            text=f"Modifica Ordine #{self.order_data[0]}",
            font=("Arial", 14, "bold")
        )
        title_label.pack(pady=(0, 20))
        
        # Form di modifica
        form_frame = ttk.LabelFrame(main_frame, text="Dettagli Ordine", padding="15")
        form_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 20))
        
        # Variabili per i campi
        self.cliente_var = tk.StringVar(value=self.order_data[2])
        self.codice_cliente_var = tk.StringVar(value=self.order_data[3])
        self.modello_var = tk.StringVar(value=self.order_data[4])
        self.colore_var = tk.StringVar(value=self.order_data[5])
        self.quantita_var = tk.StringVar(value=str(self.order_data[6]))
        self.note_var = tk.StringVar(value=self.order_data[7])
        self.evaso_var = tk.BooleanVar(value="S√¨" in str(self.order_data[8]))
        
        # Campi del form
        fields = [
            ("Nome Cliente:", self.cliente_var),
            ("Codice Cliente:", self.codice_cliente_var),
            ("Modello:", self.modello_var),
            ("Colore:", self.colore_var),
            ("Quantit√†:", self.quantita_var),
            ("Note:", self.note_var)
        ]
        
        for i, (label_text, var) in enumerate(fields):
            ttk.Label(form_frame, text=label_text).grid(row=i, column=0, sticky="w", pady=5)
            if label_text == "Note:":
                # Campo note multilinea
                note_text = tk.Text(form_frame, height=3, width=40)
                note_text.insert(1.0, var.get())
                note_text.grid(row=i, column=1, sticky="ew", pady=5, padx=(10, 0))
                self.note_text = note_text
            else:
                entry = ttk.Entry(form_frame, textvariable=var, width=30)
                entry.grid(row=i, column=1, sticky="ew", pady=5, padx=(10, 0))
        
        # Checkbox evaso
        evaso_frame = ttk.Frame(form_frame)
        evaso_frame.grid(row=len(fields), column=0, columnspan=2, sticky="w", pady=10)
        
        ttk.Checkbutton(
            evaso_frame,
            text="‚úÖ Ordine Evaso",
            variable=self.evaso_var
        ).pack(side=tk.LEFT)
        
        form_frame.grid_columnconfigure(1, weight=1)
        
        # Pulsanti
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.pack(fill=tk.X)
        
        ttk.Button(
            buttons_frame,
            text="üíæ Salva Modifiche",
            command=self.save_changes,
            style="Success.TButton"
        ).pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(
            buttons_frame,
            text="‚ùå Annulla",
            command=self.dialog.destroy,
            style="WhiteButton.TButton"
        ).pack(side=tk.LEFT)
        
        # PULSANTE SALVA MODIFICHE - ERA MANCANTE!
        ttk.Button(
            buttons_frame,
            text="ÔøΩ Salva Modifiche",
            command=self.save_changes,
            style="WhiteButton.TButton"
        ).pack(side=tk.LEFT, padx=(10, 0))
        
        ttk.Button(
            buttons_frame,
            text="ÔøΩüóëÔ∏è Elimina Ordine",
            command=self.delete_order,
            style="WhiteButton.TButton"
        ).pack(side=tk.RIGHT)
    
    def save_changes(self) -> None:
        """
        Salva le modifiche all'ordine
        Generated by Copilot
        """
        try:
            # Valida quantit√†
            quantita = int(self.quantita_var.get())
            if quantita <= 0:
                raise ValueError("Quantit√† deve essere positiva")
            
            # Raccoglie i dati modificati
            new_data: Dict[str, Any] = {
                'cliente': self.cliente_var.get().strip(),
                'codice_cliente': self.codice_cliente_var.get().strip(),
                'modello': self.modello_var.get().strip(),
                'colore': self.colore_var.get().strip(),
                'quantita': quantita,
                'note': self.note_text.get(1.0, tk.END).strip(),
                'evaso': self.evaso_var.get()
            }
            
            # Valida campi obbligatori
            required_fields = ['cliente', 'modello', 'colore']
            if not all(new_data[field] for field in required_fields):
                messagebox.showerror("Errore", "Tutti i campi obbligatori devono essere compilati")
                return
            
            # Chiama callback con i nuovi dati
            order_id: int = self.order_data[0]
            self.callback(order_id, new_data)
            
            messagebox.showinfo("Successo", f"Ordine #{order_id} modificato con successo")
            self.dialog.destroy()
            
        except ValueError as e:
            messagebox.showerror("Errore", f"Quantit√† non valida: {e}")
        except Exception as e:
            messagebox.showerror("Errore", f"Errore durante il salvataggio: {str(e)}")
    
    def delete_order(self) -> None:
        """
        Elimina l'ordine
        Generated by Copilot
        """
        order_id: int = self.order_data[0]
        result = messagebox.askyesno(
            "Conferma Eliminazione",
            f"Sei sicuro di voler eliminare l'ordine #{order_id}?\n\nQuesta azione non pu√≤ essere annullata.",
            icon="warning"
        )
        
        if result:
            # Chiama callback con None per indicare eliminazione
            messagebox.showinfo("Eliminato", f"Ordine #{order_id} eliminato con successo")
            self.dialog.destroy()
            self.callback(order_id, None)  # None indica eliminazione
