"""
Main entry point per Magazzino Tele - Architettura Modularizzata
Sistema di gestione inventario con interfaccia modulare
Generated by Copilot
"""

import tkinter as tk
from tkinter import ttk, messagebox
import sys
import os

# Aggiungi percorsi per import
current_dir = os.path.dirname(os.path.abspath(__file__))
backend_path = os.path.join(current_dir, '..', 'backend')
sys.path.insert(0, backend_path)

# Import delle pagine modularizzate
from pages.welcome import WelcomePage
from pages.ordini import CreaOrdinePage
from pages.gestisci_ordini import GestisciOrdiniPage
from pages.magazzino import MagazzinoPage

# Import styling
from utils.styling import AppStyles

# Import backend
try:
    from crud import MagazzinoTeleCRUD
except ImportError as e:
    print(f"Errore import backend: {e}")
    print(f"Percorso backend: {backend_path}")
    MagazzinoTeleCRUD = None


class MagazzinoTeleApp:
    """Applicazione principale modulare per Magazzino Tele"""
    
    def __init__(self):
        self.root = tk.Tk()
        
        # Inizializza CRUD solo se disponibile
        try:
            if MagazzinoTeleCRUD is not None:
                self.crud = MagazzinoTeleCRUD()
            else:
                self.crud = None
                print("‚ö†Ô∏è Backend non disponibile - modalit√† demo")
        except Exception as e:
            self.crud = None
            print(f"‚ö†Ô∏è Errore inizializzazione backend: {e}")
        
        self.current_page = None
        
        # Configurazione finestra principale
        self.setup_main_window()
        
        # Test connessione database
        self.test_database_connection()
        
        # Mostra pagina di benvenuto
        self.show_welcome_page()
    
    def setup_main_window(self):
        """Configura la finestra principale"""
        self.root.title("Magazzino Tele - Sistema Gestione Inventario")
        self.root.geometry("1200x800")
        self.root.minsize(1000, 600)
        
        # Icona e stile
        try:
            self.root.iconbitmap(default='')
        except Exception:
            pass  # Ignora se non trova l'icona
        
        # Tema moderno
        style = ttk.Style()
        AppStyles.setup_modern_styles()  # Usa i nuovi stili moderni
        
        # Bind chiusura applicazione
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
    
    def test_database_connection(self):
        """Testa la connessione al database"""
        if not self.crud:
            print("‚ö†Ô∏è Backend non disponibile - saltando test database")
            return
            
        try:
            if self.crud.connect():
                print("‚úì Connessione database MySQL riuscita")
                self.crud.disconnect()
            else:
                messagebox.showerror(
                    "Errore Database",
                    "Impossibile connettersi al database MySQL.\nVerifica che il server sia attivo."
                )
        except Exception as e:
            messagebox.showerror(
                "Errore Database",
                f"Errore connessione database: {e}"
            )
    
    def clear_window(self):
        """Pulisce la finestra per nuova pagina"""
        if self.current_page and hasattr(self.current_page, 'destroy'):
            self.current_page.destroy()
        else:
            for widget in self.root.winfo_children():
                widget.destroy()
    
    def show_welcome_page(self):
        """Mostra la pagina di benvenuto"""
        self.clear_window()
        self.current_page = WelcomePage(self.root, self.show_home_page)
    
    def show_home_page(self):
        """Mostra la homepage con menu principale"""
        self.clear_window()
        
        # Frame principale
        main_frame = ttk.Frame(self.root, padding="30")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Header
        header_frame = ttk.Frame(main_frame)
        header_frame.pack(fill=tk.X, pady=(0, 40))
        
        title_label = ttk.Label(
            header_frame,
            text="üè≠ Magazzino Tele - Menu Principale",
            font=("Arial", 24, "bold")
        )
        title_label.pack()
        
        subtitle_label = ttk.Label(
            header_frame,
            text="Seleziona un'opzione per iniziare",
            font=("Arial", 12),
            foreground="#7f8c8d"
        )
        subtitle_label.pack(pady=(10, 0))
        
        # Grid dei pulsanti principali
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.pack(expand=True)
        
        # Configurazione pulsanti
        button_configs = [
            {
                'text': 'üìã Crea Nuovo Ordine',
                'description': 'Avvia la creazione di un nuovo ordine cliente',
                'command': self.show_create_order_page,
                'row': 0, 'col': 0
            },
            {
                'text': 'üìÑ Gestisci Ordini',
                'description': 'Visualizza e modifica ordini esistenti',
                'command': self.show_manage_orders_page,
                'row': 0, 'col': 1
            },
            {
                'text': 'üë• Gestisci Clienti',
                'description': 'Aggiungi, modifica o elimina clienti',
                'command': self.show_manage_customers_page,
                'row': 1, 'col': 0
            },
            {
                'text': 'üì¶ Gestisci Inventario',
                'description': 'Controlla stock e gestisci prodotti',
                'command': self.show_manage_inventory_page,
                'row': 1, 'col': 1
            }
        ]
        
        for config in button_configs:
            self._create_home_button(buttons_frame, config)
        
        # Footer con info
        footer_frame = ttk.Frame(main_frame)
        footer_frame.pack(side=tk.BOTTOM, fill=tk.X, pady=(40, 0))
        
        ttk.Label(
            footer_frame,
            text="Generated by Copilot - Sistema Magazzino Tele v1.0",
            font=("Arial", 9),
            foreground="#95a5a6"
        ).pack()
        
        self.current_page = main_frame
    
    def _create_home_button(self, parent, config):
        """Crea un pulsante della homepage"""
        # Frame contenitore
        button_container = ttk.Frame(parent)
        button_container.grid(
            row=config['row'], 
            column=config['col'], 
            padx=20, 
            pady=20, 
            sticky="nsew"
        )
        
        # Pulsante principale
        main_button = ttk.Button(
            button_container,
            text=config['text'],
            command=config['command'],
            style="Accent.TButton",
            width=25
        )
        main_button.pack(pady=(0, 10))
        
        # Descrizione
        desc_label = ttk.Label(
            button_container,
            text=config['description'],
            font=("Arial", 10),
            foreground="#7f8c8d",
            wraplength=200,
            justify=tk.CENTER
        )
        desc_label.pack()
        
        # Configura grid
        parent.grid_rowconfigure(config['row'], weight=1)
        parent.grid_columnconfigure(config['col'], weight=1)
    
    def show_create_order_page(self):
        """Mostra la pagina di creazione ordini"""
        self.clear_window()
        self.current_page = CreaOrdinePage(self.root, self.show_home_page)
    
    def show_manage_orders_page(self):
        """Mostra la pagina gestione ordini"""
        self.clear_window()
        self.current_page = GestisciOrdiniPage(self.root, self.show_home_page, self.show_create_order_page)
    
    def show_manage_customers_page(self):
        """Mostra la pagina gestione clienti (placeholder)"""
        messagebox.showinfo("Info", "Pagina gestione clienti in sviluppo")
    
    def show_manage_inventory_page(self):
        """Mostra la pagina gestione inventario magazzino"""
        self.clear_window()
        try:
            self.current_page = MagazzinoPage(self.root)
            print("‚úÖ Pagina gestione inventario caricata")
        except Exception as e:
            print(f"‚ùå Errore caricamento pagina inventario: {e}")
            messagebox.showerror("Errore", f"Impossibile caricare la pagina inventario:\n{e}")
            self.show_home_page()  # Torna alla homepage in caso di errore
    
    def on_closing(self):
        """Gestisce la chiusura dell'applicazione"""
        if messagebox.askokcancel("Uscita", "Vuoi davvero uscire dall'applicazione?"):
            try:
                if hasattr(self, 'crud') and self.crud:
                    self.crud.disconnect()
                print("‚úì Applicazione chiusa correttamente")
            except Exception:
                pass
            finally:
                self.root.destroy()
    
    def run(self):
        """Avvia l'applicazione"""
        print("üöÄ Avvio Magazzino Tele - Architettura Modularizzata")
        self.root.mainloop()


def main():
    """Funzione principale"""
    try:
        app = MagazzinoTeleApp()
        app.run()
    except Exception as e:
        print(f"‚ùå Errore critico: {e}")
        messagebox.showerror("Errore Critico", f"Errore nell'avvio dell'applicazione:\n{e}")


if __name__ == "__main__":
    main()
