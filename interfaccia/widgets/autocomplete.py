"""
Widget AutocompleteEntry per ricerca intelligente
Sistema di autocomplete riutilizzabile per tutta l'applicazione
Generated by Copilot
"""

import tkinter as tk
from tkinter import ttk
from typing import List, Tuple, Optional, Callable, Any


class AutocompleteEntry(ttk.Entry):
    """Entry con funzionalità di autocomplete intelligente"""
    
    def __init__(self, parent, search_function: Callable[[str], List[Tuple]], **kwargs):
        super().__init__(parent, **kwargs)
        self.search_function = search_function
        self.suggestions: List[Tuple] = []
        self.selected_item: Optional[Tuple] = None
        
        # Bind eventi
        self.bind('<KeyRelease>', self._on_key_release)
        self.bind('<FocusOut>', self._on_focus_out)
        
        # Finestra e listbox suggerimenti
        self.suggestions_listbox: Optional[tk.Listbox] = None
        self.suggestions_window: Optional[tk.Toplevel] = None
    
    def _on_key_release(self, event):
        """Gestisce il rilascio dei tasti per l'autocomplete"""
        if event.keysym in ['Up', 'Down', 'Return', 'Tab']:
            return
        
        current_text = self.get()
        if len(current_text) < 2:
            self._hide_suggestions()
            return
        
        # Cerca suggerimenti
        try:
            self.suggestions = self.search_function(current_text)
            if self.suggestions:
                self._show_suggestions()
            else:
                self._hide_suggestions()
        except Exception as e:
            print(f"Errore ricerca autocomplete: {e}")
            self._hide_suggestions()
    
    def _show_suggestions(self):
        """Mostra la lista dei suggerimenti"""
        if not self.suggestions:
            return
        
        if self.suggestions_window:
            self.suggestions_window.destroy()
        
        self.suggestions_window = tk.Toplevel(self)
        self.suggestions_window.wm_overrideredirect(True)
        self.suggestions_window.configure(bg='white', relief='solid', bd=1)
        
        # Calcola larghezza del campo di input in pixel (con un minimo)
        entry_width = max(self.winfo_width(), 200)
        
        # Posizione della finestra
        x = self.winfo_rootx()
        y = self.winfo_rooty() + self.winfo_height()
        
        # Verifica che la finestra non esca dai bordi dello schermo
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        
        # Aggiusta posizione X se necessario
        if x + entry_width > screen_width:
            x = screen_width - entry_width - 10
        
        # Calcola altezza dinamica
        max_visible_items = min(8, len(self.suggestions))
        height = max_visible_items * 22 + 6  # 22px per riga + padding migliorato
        
        # Aggiusta posizione Y se necessario (mostra sopra se non c'è spazio sotto)
        if y + height > screen_height:
            y = self.winfo_rooty() - height
        
        # Imposta geometria finale
        self.suggestions_window.geometry(f"{entry_width}x{height}+{x}+{y}")
        
        # Porta la finestra in primo piano
        self.suggestions_window.lift()
        self.suggestions_window.attributes("-topmost", True)
        
        # Listbox con suggerimenti - larghezza adattata e stile migliorato
        self.suggestions_listbox = tk.Listbox(
            self.suggestions_window,
            height=max_visible_items,
            font=("Segoe UI", 10),
            width=0,  # Larghezza automatica per riempire la finestra
            selectmode=tk.SINGLE,
            relief=tk.FLAT,
            borderwidth=0,
            highlightthickness=0,
            bg='white',
            fg='black',
            selectbackground='#0078d4',
            selectforeground='white',
            activestyle='none'
        )
        self.suggestions_listbox.pack(fill=tk.BOTH, expand=True, padx=2, pady=2)
        
        # Popola la listbox con formattazione migliorata
        for item in self.suggestions:
            if len(item) > 1:
                # Formatta con allineamento migliore per leggibilità
                display_text = f"{item[0]} | {item[1]}"
            else:
                display_text = str(item[0])
            self.suggestions_listbox.insert(tk.END, display_text)
        
        # Evidenzia automaticamente il primo elemento
        if self.suggestions:
            self.suggestions_listbox.selection_set(0)
            self.suggestions_listbox.activate(0)
        
        # Bind per selezione e navigazione
        self.suggestions_listbox.bind('<ButtonRelease-1>', self._on_suggestion_select)
        self.suggestions_listbox.bind('<Return>', self._on_suggestion_select)
        self.suggestions_listbox.bind('<Double-Button-1>', self._on_suggestion_select)
        
        # Bind per navigazione con tastiera nell'entry principale
        self.bind('<Down>', self._on_arrow_down)
        self.bind('<Up>', self._on_arrow_up)
        self.bind('<Return>', self._on_enter_key)
        self.bind('<Escape>', self._on_escape_key)
    
    def _hide_suggestions(self):
        """Nasconde la lista dei suggerimenti"""
        if self.suggestions_window:
            self.suggestions_window.destroy()
            self.suggestions_window = None
            self.suggestions_listbox = None
    
    def _on_suggestion_select(self, event=None):
        """Gestisce la selezione di un suggerimento"""
        if not self.suggestions_listbox:
            return
        
        selection = self.suggestions_listbox.curselection()
        if selection:
            index = selection[0]
            self.selected_item = self.suggestions[index]
            
            # Aggiorna il testo dell'entry
            display_text = f"{self.selected_item[0]} - {self.selected_item[1]}" if len(self.selected_item) > 1 else str(self.selected_item[0])
            self.delete(0, tk.END)
            self.insert(0, display_text)
            
            self._hide_suggestions()
    
    def _on_focus_out(self, event=None):
        """Nasconde i suggerimenti quando perde il focus"""
        # Ritardo per permettere il click sui suggerimenti
        self.after(200, self._hide_suggestions)
    
    def get_selected_item(self) -> Optional[Tuple]:
        """Ritorna l'item selezionato"""
        return self.selected_item
    
    def clear_selection(self):
        """Pulisce la selezione corrente"""
        self.selected_item = None
        self.delete(0, tk.END)
    
    def _on_arrow_down(self, event=None):
        """Gestisce freccia giù per navigare nei suggerimenti"""
        if self.suggestions_listbox and self.suggestions:
            current = self.suggestions_listbox.curselection()
            if current:
                index = current[0]
                if index < len(self.suggestions) - 1:
                    self.suggestions_listbox.selection_clear(0, tk.END)
                    self.suggestions_listbox.selection_set(index + 1)
                    self.suggestions_listbox.activate(index + 1)
                    self.suggestions_listbox.see(index + 1)
            return "break"  # Previene il comportamento default
    
    def _on_arrow_up(self, event=None):
        """Gestisce freccia su per navigare nei suggerimenti"""
        if self.suggestions_listbox and self.suggestions:
            current = self.suggestions_listbox.curselection()
            if current:
                index = current[0]
                if index > 0:
                    self.suggestions_listbox.selection_clear(0, tk.END)
                    self.suggestions_listbox.selection_set(index - 1)
                    self.suggestions_listbox.activate(index - 1)
                    self.suggestions_listbox.see(index - 1)
            return "break"
    
    def _on_enter_key(self, event=None):
        """Gestisce il tasto Enter per selezionare l'elemento corrente"""
        if self.suggestions_listbox and self.suggestions:
            self._on_suggestion_select()
            return "break"
    
    def _on_escape_key(self, event=None):
        """Gestisce il tasto Escape per nascondere i suggerimenti"""
        self._hide_suggestions()
        return "break"


class AutocompleteListEntry:
    """Entry con autocomplete per liste multiple (demo/placeholder)"""
    
    def __init__(self, parent: tk.Widget, search_function: Callable[[str], List[Any]], **kwargs):
        # Placeholder per eventuale implementazione futura
        pass
