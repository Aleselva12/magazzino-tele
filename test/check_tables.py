"""
Script per verificare e creare le tabelle mancanti
Generated by Copilot
"""

import sys
import os

# Aggiungi il percorso del backend
current_dir = os.path.dirname(os.path.abspath(__file__))
backend_path = os.path.join(current_dir, 'backend')
sys.path.insert(0, backend_path)

from crud import MagazzinoTeleCRUD

def check_and_create_tables():
    """Verifica e crea le tabelle necessarie"""
    crud = MagazzinoTeleCRUD()
    
    try:
        if crud.connect():
            print("‚úÖ Connessione database riuscita")
            
            cursor = crud.connection.cursor()
            
            # Mostra tutte le tabelle
            print("üìã Tabelle esistenti nel database:")
            cursor.execute("SHOW TABLES")
            tables = cursor.fetchall()
            
            table_names = [table[0] for table in tables]
            for table in table_names:
                print(f"  - {table}")
            
            # Cerca tabelle che potrebbero contenere i prodotti degli ordini
            print("\nüîç Cercando tabelle simili a 'prodottiordini'...")
            for table in table_names:
                if 'prodotti' in table.lower() and 'ordini' in table.lower():
                    print(f"  üì¶ Trovata: {table}")
                    
                    # Mostra la struttura
                    cursor.execute(f"DESCRIBE `{table}`")
                    columns = cursor.fetchall()
                    print(f"    Struttura di {table}:")
                    for col in columns:
                        print(f"      - {col[0]}: {col[1]}")
            
            # Verifica se esiste la tabella 'Prodottiordini' (con P maiuscola)
            if 'Prodottiordini' in table_names:
                print("\n‚úÖ Trovata tabella 'Prodottiordini'")
                
                # Mostra alcuni dati
                cursor.execute("SELECT COUNT(*) FROM `Prodottiordini`")
                count = cursor.fetchone()[0]
                print(f"üìä Record in Prodottiordini: {count}")
                
                if count > 0:
                    cursor.execute("SELECT * FROM `Prodottiordini` LIMIT 3")
                    rows = cursor.fetchall()
                    print("üîç Primi 3 record:")
                    for row in rows:
                        print(f"    {row}")
                
                # Ora prova ad aggiungere un prodotto all'ordine usando la tabella corretta
                print("\nüß™ Test aggiunta prodotto all'ordine usando 'Prodottiordini'...")
                
                # Prende il primo prodotto disponibile
                cursor.execute("SELECT `Codice Prodotto` FROM prodotti_completi LIMIT 1")
                prodotto = cursor.fetchone()
                
                if prodotto:
                    codice_prodotto = prodotto[0]
                    
                    # Inserisce nella tabella Prodottiordini (maiuscola)
                    insert_query = """
                    INSERT INTO `Prodottiordini` (`Codice Ordine`, `Codice Prodotto`, Quantita)
                    VALUES (%s, %s, %s)
                    """
                    
                    cursor.execute(insert_query, ("1", codice_prodotto, 5))
                    crud.connection.commit()
                    
                    print(f"‚úÖ Prodotto {codice_prodotto} aggiunto all'ordine 1")
            
            else:
                print("\n‚ùå Tabella 'Prodottiordini' non trovata")
                print("üîß Creazione tabella necessaria...")
                
                # Crea la tabella prodottiordini
                create_table_query = """
                CREATE TABLE `prodottiordini` (
                    `codiceprodottiordini` INT AUTO_INCREMENT PRIMARY KEY,
                    `codiceordine` VARCHAR(50) NOT NULL,
                    `codiceprodotto` VARCHAR(50) NOT NULL,
                    `quantita` INT NOT NULL DEFAULT 1,
                    INDEX `idx_ordine` (`codiceordine`),
                    INDEX `idx_prodotto` (`codiceprodotto`)
                )
                """
                
                cursor.execute(create_table_query)
                crud.connection.commit()
                print("‚úÖ Tabella 'prodottiordini' creata con successo!")
            
            cursor.close()
            crud.disconnect()
            
        else:
            print("‚ùå Errore connessione database")
            
    except Exception as e:
        print(f"‚ùå Errore: {e}")

if __name__ == "__main__":
    check_and_create_tables()
