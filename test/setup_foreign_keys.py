"""
Script per creare i collegamenti corretti tra le tabelle ordini e ordiniprodotti
Generated by Copilot
"""

import sys
import os

# Aggiungi il percorso del backend
current_dir = os.path.dirname(os.path.abspath(__file__))
backend_path = os.path.join(current_dir, 'backend')
sys.path.insert(0, backend_path)

from crud import MagazzinoTeleCRUD

def setup_foreign_keys():
    """Crea le foreign key per collegare correttamente le tabelle"""
    crud = MagazzinoTeleCRUD()
    
    try:
        if crud.connect():
            print("‚úÖ Connessione database riuscita")
            
            cursor = crud.connection.cursor()
            
            # Verifica le foreign key esistenti
            print("üîç Verifico foreign key esistenti...")
            cursor.execute("""
                SELECT 
                    TABLE_NAME,
                    COLUMN_NAME,
                    CONSTRAINT_NAME,
                    REFERENCED_TABLE_NAME,
                    REFERENCED_COLUMN_NAME
                FROM information_schema.KEY_COLUMN_USAGE
                WHERE TABLE_SCHEMA = 'magazzino_tele'
                AND REFERENCED_TABLE_NAME IS NOT NULL
            """)
            
            existing_fks = cursor.fetchall()
            print(f"üìã Foreign key esistenti: {len(existing_fks)}")
            for fk in existing_fks:
                print(f"  - {fk[0]}.{fk[1]} -> {fk[3]}.{fk[4]} ({fk[2]})")
            
            # Crea foreign key tra ordiniprodotti e ordini
            print("\nüîß Creazione foreign key ordiniprodotti -> ordini...")
            try:
                # Prima verifica se la foreign key esiste gi√†
                fk_exists = any(fk[0] == 'ordiniprodotti' and fk[1] == 'codice ordine' for fk in existing_fks)
                
                if not fk_exists:
                    cursor.execute("""
                        ALTER TABLE ordiniprodotti 
                        ADD CONSTRAINT fk_ordiniprodotti_ordini 
                        FOREIGN KEY (`codice ordine`) 
                        REFERENCES ordini(`codice ordine`)
                        ON DELETE CASCADE 
                        ON UPDATE CASCADE
                    """)
                    print("‚úÖ Foreign key ordiniprodotti -> ordini creata")
                else:
                    print("‚úÖ Foreign key ordiniprodotti -> ordini gi√† esistente")
                
            except Exception as e:
                print(f"‚ö†Ô∏è Errore creazione FK ordiniprodotti->ordini: {e}")
            
            # Crea foreign key tra ordiniprodotti e prodotti_completi
            print("\nüîß Creazione foreign key ordiniprodotti -> prodotti_completi...")
            try:
                fk_exists = any(fk[0] == 'ordiniprodotti' and fk[1] == 'codice prodotto' for fk in existing_fks)
                
                if not fk_exists:
                    cursor.execute("""
                        ALTER TABLE ordiniprodotti 
                        ADD CONSTRAINT fk_ordiniprodotti_prodotti 
                        FOREIGN KEY (`codice prodotto`) 
                        REFERENCES prodotti_completi(`Codice Prodotto`)
                        ON DELETE CASCADE 
                        ON UPDATE CASCADE
                    """)
                    print("‚úÖ Foreign key ordiniprodotti -> prodotti_completi creata")
                else:
                    print("‚úÖ Foreign key ordiniprodotti -> prodotti_completi gi√† esistente")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è Errore creazione FK ordiniprodotti->prodotti: {e}")
            
            # Crea foreign key tra ordini e customers
            print("\nüîß Creazione foreign key ordini -> customers...")
            try:
                fk_exists = any(fk[0] == 'ordini' and fk[1] == 'codice cliente' for fk in existing_fks)
                
                if not fk_exists:
                    cursor.execute("""
                        ALTER TABLE ordini 
                        ADD CONSTRAINT fk_ordini_customers 
                        FOREIGN KEY (`codice cliente`) 
                        REFERENCES customers(`codice cliente`)
                        ON DELETE SET NULL 
                        ON UPDATE CASCADE
                    """)
                    print("‚úÖ Foreign key ordini -> customers creata")
                else:
                    print("‚úÖ Foreign key ordini -> customers gi√† esistente")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è Errore creazione FK ordini->customers: {e}")
            
            crud.connection.commit()
            
            # Ora inserisce un prodotto nell'ordine esistente
            print("\nüß™ Test inserimento prodotto nell'ordine...")
            
            # Prende il primo prodotto
            cursor.execute("SELECT `Codice Prodotto`, `Nome Modello`, `Nome Colore` FROM prodotti_completi LIMIT 1")
            prodotto = cursor.fetchone()
            
            if prodotto:
                codice_prodotto = prodotto[0]
                nome_modello = prodotto[1]
                nome_colore = prodotto[2]
                
                print(f"üì¶ Prodotto: {codice_prodotto} - {nome_modello} {nome_colore}")
                
                # Inserisce il prodotto specificando un valore per codiceordiniprodotti
                cursor.execute("SELECT MAX(codiceordiniprodotti) FROM ordiniprodotti")
                max_id = cursor.fetchone()[0]
                next_id = (max_id or 0) + 1
                
                cursor.execute("""
                    INSERT INTO ordiniprodotti 
                    (codiceordiniprodotti, `codice ordine`, `codice prodotto`, quantita, pronto)
                    VALUES (%s, %s, %s, %s, %s)
                """, (next_id, 1, codice_prodotto, 3, 0))
                
                crud.connection.commit()
                print("‚úÖ Prodotto inserito nell'ordine!")
                
                # Verifica il risultato con JOIN
                cursor.execute("""
                    SELECT o.`codice ordine`, o.data, c.`ragione sociale`,
                           p.`Nome Modello`, p.`Nome Colore`, op.quantita
                    FROM ordini o
                    LEFT JOIN customers c ON o.`codice cliente` = c.`codice cliente`
                    JOIN ordiniprodotti op ON o.`codice ordine` = op.`codice ordine`
                    JOIN prodotti_completi p ON op.`codice prodotto` = p.`Codice Prodotto`
                    WHERE o.`codice ordine` = 1
                """)
                
                result = cursor.fetchone()
                if result:
                    print(f"\nüìã Ordine completo:")
                    print(f"  - Ordine: {result[0]}")
                    print(f"  - Data: {result[1]}")
                    print(f"  - Cliente: {result[2] if result[2] else 'N/A'}")
                    print(f"  - Prodotto: {result[3]} - {result[4]}")
                    print(f"  - Quantit√†: {result[5]}")
                
            cursor.close()
            crud.disconnect()
            
        else:
            print("‚ùå Errore connessione database")
            
    except Exception as e:
        print(f"‚ùå Errore: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    setup_foreign_keys()
