"""
inventario_crud.py
Gestione inventario e magazzino per Magazzino Tele
Operazioni CRUD specifiche per inventario e griglia Modelli x Colori
Generated by Copilot
"""

import mysql.connector
from mysql.connector import Error
from typing import Optional, List, Dict, Any, Tuple
import logging

class InventarioCRUD:
    """Classe per gestione inventario magazzino tessuti"""
    
    def __init__(self, host: str = "localhost", database: str = "magazzino_tele", 
                 user: str = "root", password: str = "Aleselva123"):
        self.host = host
        self.database = database
        self.user = user
        self.password = password
        self.connection: Optional[mysql.connector.MySQLConnection] = None
        
        # Modelli di interesse definiti dal cliente
        self.modelli_interesse = [1, 3, 4, 5, 6, 11, 16, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30]
        
    def connect(self) -> bool:
        """Connette al database MySQL"""
        try:
            self.connection = mysql.connector.connect(
                host=self.host,
                database=self.database,
                user=self.user,
                password=self.password
            )
            if self.connection.is_connected():
                print(f"✅ Connessione inventario database MySQL riuscita")
                return True
        except Error as e:
            print(f"❌ Errore connessione database inventario: {e}")
            return False
        return False
    
    def disconnect(self) -> None:
        """Disconnette dal database"""
        if self.connection and self.connection.is_connected():
            self.connection.close()
            print("🔌 Disconnessione inventario database completata")
    
    def get_all_modelli(self) -> List[Dict[str, Any]]:
        """
        Recupera tutti i modelli di interesse dal database
        Returns: Lista di dict con codice_modello e nome_modello
        """
        if not self.connection or not self.connection.is_connected():
            print("❌ Database non connesso")
            return []
            
        cursor = self.connection.cursor()
        try:
            # Query per ottenere solo i modelli di interesse (correzione nomi colonne)
            modelli_str = ','.join(map(str, self.modelli_interesse))
            query = f"SELECT `ï»¿codice modello`, `MODELLO` FROM modelli WHERE `ï»¿codice modello` IN ({modelli_str}) ORDER BY `ï»¿codice modello`"
            cursor.execute(query)
            results = cursor.fetchall()
            
            modelli = []
            for codice, nome in results:
                modelli.append({
                    'codice_modello': codice,
                    'nome_modello': nome or f"Modello {codice}"
                })
            
            print(f"📦 Caricati {len(modelli)} modelli di interesse")
            return modelli
            
        except Error as e:
            print(f"❌ Errore recupero modelli: {e}")
            return []
        finally:
            cursor.close()
    
    def get_all_colori(self) -> List[Dict[str, Any]]:
        """
        Recupera tutti i colori dal database
        Returns: Lista di dict con codice_colore e nome_colore
        """
        if not self.connection or not self.connection.is_connected():
            print("❌ Database non connesso")
            return []
            
        cursor = self.connection.cursor()
        try:
            # Correzione nomi colonne per prodotti_completi
            query = """
            SELECT DISTINCT `Codice Colore`, `Nome Colore` 
            FROM prodotti_completi 
            WHERE `Codice Colore` IS NOT NULL 
            ORDER BY `Codice Colore`
            """
            cursor.execute(query)
            results = cursor.fetchall()
            
            colori = []
            for codice, descrizione in results:
                colori.append({
                    'codice_colore': codice,
                    'nome_colore': descrizione or f"Colore {codice}"
                })
            
            print(f"🎨 Caricati {len(colori)} colori")
            return colori
            
        except Error as e:
            print(f"❌ Errore recupero colori: {e}")
            return []
        finally:
            cursor.close()
    
    def get_inventario_grid(self) -> Dict[str, Any]:
        """
        Recupera la griglia completa inventario Colori x Modelli
        Returns: Dict con colori, modelli e quantità
        """
        if not self.connection or not self.connection.is_connected():
            if not self.connect():
                return {'colori': [], 'modelli': [], 'quantita': {}}
        
        # Ottieni colori e modelli (invertiti: colori come righe, modelli come colonne)
        colori = self.get_all_colori()
        modelli = self.get_all_modelli()
        
        # Ottieni quantità dal magazzino
        quantita_dict = self._get_quantita_magazzino()
        
        return {
            'colori': colori,
            'modelli': modelli,
            'quantita': quantita_dict
        }
    
    def _get_quantita_magazzino(self) -> Dict[str, int]:
        """
        Recupera tutte le quantità dal magazzino
        Returns: Dict con codiceprodotto -> quantita
        """
        if not self.connection or not self.connection.is_connected():
            return {}
            
        cursor = self.connection.cursor()
        try:
            query = "SELECT codiceprodotto, quantita FROM magazzino"
            cursor.execute(query)
            results = cursor.fetchall()
            
            quantita_dict = {}
            for codice_prodotto, quantita in results:
                quantita_dict[codice_prodotto] = quantita or 0
            
            print(f"📊 Caricate {len(quantita_dict)} quantità magazzino")
            return quantita_dict
            
        except Error as e:
            print(f"❌ Errore recupero quantità: {e}")
            return {}
        finally:
            cursor.close()
    
    def get_quantita_by_modello_colore(self, codice_modello: int, codice_colore: int) -> int:
        """
        Recupera quantità per specifica combinazione modello-colore
        """
        if not self.connection or not self.connection.is_connected():
            return 0
            
        cursor = self.connection.cursor()
        try:
            # Prima trova il codice prodotto dalla combinazione modello+colore (correzione nomi colonne)
            query_prodotto = """
            SELECT `Codice Prodotto` FROM prodotti_completi 
            WHERE `Codice Modello` = %s AND `Codice Colore` = %s
            """
            cursor.execute(query_prodotto, (codice_modello, codice_colore))
            result = cursor.fetchone()
            
            if not result:
                return 0
                
            codice_prodotto = result[0]
            
            # Poi recupera la quantità dal magazzino
            query_quantita = "SELECT quantita FROM magazzino WHERE codiceprodotto = %s"
            cursor.execute(query_quantita, (codice_prodotto,))
            result = cursor.fetchone()
            
            return result[0] if result else 0
            
        except Error as e:
            print(f"❌ Errore recupero quantità modello {codice_modello} colore {codice_colore}: {e}")
            return 0
        finally:
            cursor.close()
    
    def update_quantita(self, codice_modello: int, codice_colore: int, nuova_quantita: int) -> bool:
        """
        Aggiorna quantità per specifica combinazione modello-colore
        """
        if not self.connection or not self.connection.is_connected():
            if not self.connect():
                return False
            
        cursor = self.connection.cursor()
        try:
            # Prima trova il codice prodotto (correzione nomi colonne)
            query_prodotto = """
            SELECT `Codice Prodotto` FROM prodotti_completi 
            WHERE `Codice Modello` = %s AND `Codice Colore` = %s
            """
            cursor.execute(query_prodotto, (codice_modello, codice_colore))
            result = cursor.fetchone()
            
            if not result:
                print(f"⚠️ Prodotto non trovato per modello {codice_modello} colore {codice_colore}")
                return False
                
            codice_prodotto = result[0]
            
            # Aggiorna o inserisci nel magazzino
            query_upsert = """
            INSERT INTO magazzino (codiceprodotto, quantita) 
            VALUES (%s, %s) 
            ON DUPLICATE KEY UPDATE quantita = %s
            """
            cursor.execute(query_upsert, (codice_prodotto, nuova_quantita, nuova_quantita))
            self.connection.commit()
            
            print(f"✅ Aggiornata quantità {codice_prodotto}: {nuova_quantita}")
            return True
            
        except Error as e:
            print(f"❌ Errore aggiornamento quantità: {e}")
            self.connection.rollback()
            return False
        finally:
            cursor.close()
    
    def get_stock_alerts(self, soglia_minima: int = 5) -> List[Dict[str, Any]]:
        """
        Recupera prodotti con scorte sotto soglia minima
        """
        if not self.connection or not self.connection.is_connected():
            if not self.connect():
                return []
            
        cursor = self.connection.cursor()
        try:
            query = """
            SELECT m.codiceprodotto, m.quantita, pc.Codice_Modello, pc.Codice_Colore,
                   pc.Descrizione_Modello, pc.Descrizione_Colore
            FROM magazzino m
            JOIN prodotti_completi pc ON m.codiceprodotto = pc.Codice_Prodotto
            WHERE m.quantita < %s
            ORDER BY m.quantita ASC
            """
            cursor.execute(query, (soglia_minima,))
            results = cursor.fetchall()
            
            alerts = []
            for codice_prod, quantita, cod_mod, cod_col, desc_mod, desc_col in results:
                alerts.append({
                    'codice_prodotto': codice_prod,
                    'quantita': quantita,
                    'codice_modello': cod_mod,
                    'codice_colore': cod_col,
                    'descrizione_modello': desc_mod,
                    'descrizione_colore': desc_col
                })
            
            return alerts
            
        except Error as e:
            print(f"❌ Errore recupero alert scorte: {e}")
            return []
        finally:
            cursor.close()
    
    def process_order_movement(self, codice_ordine: int, tipo_movimento: str) -> bool:
        """
        Processa movimento magazzino da ordine (vendita/acquisto)
        tipo_movimento: 'vendita' (-) o 'acquisto' (+)
        """
        if not self.connection or not self.connection.is_connected():
            if not self.connect():
                return False
                
        cursor = self.connection.cursor()
        try:
            # Recupera dettagli ordine
            query_ordine = """
            SELECT op.codice_ordine_prodotto, op.quantita, pc.Codice_Prodotto
            FROM ordiniprodotti op
            JOIN prodotti_completi pc ON op.codice_prodotto = pc.Codice_Prodotto  
            WHERE op.ordine_id = %s
            """
            cursor.execute(query_ordine, (codice_ordine,))
            ordine_prodotti = cursor.fetchall()
            
            if not ordine_prodotti:
                print(f"⚠️ Nessun prodotto trovato per ordine {codice_ordine}")
                return False
            
            # Processa ogni prodotto nell'ordine
            for _, quantita_ordine, codice_prodotto in ordine_prodotti:
                
                # Calcola delta quantità (+ per acquisti, - per vendite)
                delta = quantita_ordine if tipo_movimento == 'acquisto' else -quantita_ordine
                
                # Aggiorna magazzino
                query_update = """
                INSERT INTO magazzino (codiceprodotto, quantita) 
                VALUES (%s, %s) 
                ON DUPLICATE KEY UPDATE quantita = quantita + %s
                """
                cursor.execute(query_update, (codice_prodotto, delta, delta))
            
            self.connection.commit()
            print(f"✅ Movimento magazzino processato per ordine {codice_ordine} ({tipo_movimento})")
            return True
            
        except Error as e:
            print(f"❌ Errore processo movimento ordine: {e}")
            self.connection.rollback()
            return False
        finally:
            cursor.close()
